{"version":3,"file":"static/js/52.79401433.chunk.js","mappings":"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","sources":["pages/profile/components/other/ChangeImageModal.tsx","svgs/empty/Posts.tsx","pages/profile/components/other/ProfileNavBar.tsx","pages/profile/components/user-page-types/LoggedUsersProfile.tsx","pages/profile/components/user-page-types/UserOnPageProfile.tsx","pages/profile/DefineProfile.tsx","svgs/empty/Additional.tsx"],"sourcesContent":["import React from 'react'\r\nimport { useAppDispatch, useAppSelector } from 'redux-setup/hooks';\r\nimport { deleteObject, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\nimport { updateDoc, doc } from \"firebase/firestore\";\r\nimport { db, storage } from 'firebase-setup/firebaseConfig';\r\nimport { v4 } from \"uuid\";\r\nimport { setSignedUser } from 'redux-setup/features/signedUser';\r\nimport UserState from 'types/user-state-type';\r\nimport { setIsBeingLoaded } from 'redux-setup/features/isBeingLoaded';\r\n\r\ntype ChangeImageModalProps = {\r\n    closeEvent: () => void\r\n}\r\n\r\nconst ChangeImageModal: React.FC<ChangeImageModalProps> = React.memo(({ closeEvent }) => {\r\n    const currentUser = useAppSelector(state => state.signedUser.user);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const uploadImage = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if(!event.target.files){\r\n            return;\r\n        }\r\n        dispatch(setIsBeingLoaded(true))\r\n\r\n        const imageUpload = event.target.files[0];\r\n\r\n        if (currentUser.profileImage !== \"\") {\r\n            const deleteImageRef = ref(storage, currentUser.profileImage);\r\n            await deleteObject(deleteImageRef);\r\n        }\r\n\r\n        const imageRef = ref(storage, `Images/${imageUpload.name + v4()}`)\r\n        await uploadBytes(imageRef, imageUpload)\r\n\r\n        const imageUrl = await getDownloadURL(imageRef);\r\n        await updateDoc(doc(db, \"users\", currentUser.userId), {\r\n            profileImage: imageUrl\r\n        });\r\n\r\n        dispatch(setSignedUser({...currentUser, profileImage: imageUrl}));\r\n        closeEvent();\r\n\r\n        dispatch(setIsBeingLoaded(false))\r\n    }\r\n\r\n    const deleteImage = async (currentUser: UserState) => {\r\n        const imageRef = ref(storage, currentUser.profileImage);\r\n        await deleteObject(imageRef);\r\n\r\n        dispatch(setIsBeingLoaded(true))\r\n\r\n        await updateDoc(doc(db, \"users\", currentUser.userId), {\r\n            profileImage: \"\"\r\n        });\r\n\r\n        dispatch(setSignedUser({ ...currentUser, profileImage: \"\" }));\r\n        closeEvent();\r\n\r\n        dispatch(setIsBeingLoaded(false))\r\n    }\r\n\r\n    return (\r\n        <div className=\"h-full w-full flex flex-col items-center\">\r\n            <div className=\"w-full h-[50px] flex mt-2 mb-1 items-start justify-center\">\r\n                <img\r\n                    src={currentUser.profileImage.length ? currentUser.profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"}\r\n                    className=\"rounded-full h-full w-[50px] object-cover\"\r\n                />\r\n            </div>\r\n            <p className=\"font-medium text-md\">Synced Profile Photo</p>\r\n            <p className=\"text-center text-gray-400 text-sm pb-2\">Instagram</p>\r\n            <label\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center cursor-pointer\"\r\n            >\r\n                <input\r\n                    type=\"file\"\r\n                    accept=\"image/png, image/jpg, image/jpeg\"\r\n                    className=\"hidden\"\r\n                    onChange={(event) => uploadImage(event)}\r\n                />\r\n                <p className=\"text-teal-500 font-medium text-sm\">Upload Photo</p>\r\n            </label>\r\n            <button\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center text-sm\"\r\n            >\r\n                Manage Sync Settings\r\n            </button>\r\n            {\r\n                currentUser.profileImage.length ?\r\n                    <button\r\n                        className=\"w-full h-12 border-t-2 flex items-center justify-center text-rose-600 font-medium text-sm\"\r\n                        onClick={() => deleteImage(currentUser)}\r\n                    >\r\n                        Remove Current Photo\r\n                    </button> :\r\n                    undefined\r\n            }\r\n            <button\r\n                className=\"w-full h-12 border-t-2 flex items-center justify-center text-sm\"\r\n                onClick={closeEvent}\r\n            >\r\n                Cancel\r\n            </button>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ChangeImageModal","import React from 'react'\r\n\r\nconst Posts: React.FC = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Posts","import React, { useEffect, useState } from 'react'\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport ProfileRoutes from 'constants/profile-routes';\r\nimport Posts from 'svgs/empty/Posts';\r\nimport Profile from 'svgs/empty/Profile';\r\nimport Saved from 'svgs/empty/Saved';\r\n\r\nconst ProfileNavBar: React.FC<{ isUsersPage: boolean }> = React.memo(({ isUsersPage }) => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    const defineLocation = () => {\r\n        const pathNameArray = location.pathname.split(\"/\");\r\n        switch(pathNameArray[pathNameArray.length - 1]){\r\n            case ProfileRoutes.SAVED: {\r\n                return 1;\r\n            }\r\n            case ProfileRoutes.TAGGED: {\r\n                return 2;\r\n            }\r\n            default: {\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    const [currentTab, setCurrentTab] = useState<number>(defineLocation());\r\n\r\n    useEffect(() => {\r\n        setCurrentTab(defineLocation());\r\n    }, [location.pathname])\r\n\r\n    return (\r\n        <nav className=\"flex border-t justify-center items-center border-t-gray-300 gap-12 lg:gap-16 text-[12px] font-medium tracking-widest w-full sm:w-3/4 lg:w-2/3\">\r\n            <button\r\n                onClick={() => {\r\n                    navigate(ProfileRoutes.POSTS);\r\n                    setCurrentTab(0);\r\n                }}\r\n                className={`h-12 flex items-center text-gray-400 gap-1 ${currentTab === 0 && \"border-t border-t-gray-900 text-black\"}`}\r\n            >\r\n                <Posts />\r\n                <p>POSTS</p>\r\n            </button>\r\n            {\r\n                isUsersPage ?\r\n                    <button\r\n                        onClick={() => {\r\n                            navigate(ProfileRoutes.SAVED);\r\n                            setCurrentTab(1);\r\n                        }}\r\n                        className={`h-12 flex items-center text-gray-400 gap-1  ${currentTab === 1 && \"border-t border-t-gray-900 text-black\"}`}\r\n                    >\r\n                        <Saved\r\n                            styles=\"w-4 h-4\"\r\n                            includeHovering={false}\r\n                        />\r\n                        <p>SAVED</p>\r\n                    </button> :\r\n                    null\r\n            }\r\n            <button\r\n                onClick={() => {\r\n                    navigate(ProfileRoutes.TAGGED);\r\n                    setCurrentTab(2);\r\n                }}\r\n                className={`h-12 flex items-center text-gray-400 gap-1 ${currentTab === 2 && \"border-t border-t-gray-900 text-black\"}`}\r\n            >\r\n                <Profile styles=\"w-4 h-4\" />\r\n                <p>TAGGED</p>\r\n            </button>\r\n        </nav>\r\n    )\r\n})\r\n\r\nexport default ProfileNavBar","import React, { useEffect, useState } from 'react'\r\nimport { Link, Navigate, Outlet, useNavigate, useParams } from 'react-router-dom';\r\nimport AccountsRoutes from 'constants/accounts-routes';\r\nimport ProfileRoutes from 'constants/profile-routes';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport { clearErrors, fetchSignedUser } from 'redux-setup/features/signedUser';\r\nimport { useAppDispatch, useAppSelector } from 'redux-setup/hooks';\r\nimport Settings from 'svgs/empty/Settings';\r\nimport Modal from 'components/modal/Modal';\r\nimport ChangeImageModal from '../other/ChangeImageModal';\r\nimport ProfileNavBar from '../other/ProfileNavBar';\r\n\r\nconst LoggedUsersProfile: React.FC = React.memo(() => {\r\n    const {user: signedUser, status } = useAppSelector(state => state.signedUser);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { uid } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    const [shouldRedirect, setShouldRedirect] = useState<boolean>(false);\r\n    const [isImageModalOpen, setIsImageModalOpen] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchSignedUser(uid as string));\r\n    }, [uid])\r\n\r\n    useEffect(() => {\r\n        if (status === \"rejected\") {\r\n            dispatch(clearErrors());\r\n            setShouldRedirect(true);\r\n        }\r\n    }, [status])\r\n\r\n    return (\r\n        shouldRedirect ?\r\n            <Navigate to={RoutesTypes.NOT_FOUND} /> :\r\n            <div className=\"min-h-[calc(100vh-60px)] w-screen flex flex-col items-center back\">\r\n                <div className=\"flex items-center flex-col sm:flex-row w-full sm:w-3/4 lg:w-5/6 xl:w-4/5 justify-center gap-2 pt-4 pb-3 px-1\">\r\n                    <div className=\"w-full sm:w-2/5 sm:h-60 flex justify-center items-center\">\r\n                        <img\r\n                            src={signedUser.profileImage.length ? signedUser.profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"}\r\n                            className=\"rounded-full w-[170px] h-[170px] object-cover cursor-pointer\"\r\n                            onClick={() => setIsImageModalOpen(true)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"flex flex-col w-5/6 sm:w-3/5 py-4 gap-6\">\r\n                        <div className=\"flex gap-4\">\r\n                            <p className=\"text-3xl font-extralight\">{signedUser.username}</p>\r\n                            <div className=\"flex items-center gap-4\">\r\n                                <Link\r\n                                    to={RoutesTypes.ACOUNTS + \"/\" + AccountsRoutes.EDIT_PROFILE}\r\n                                    className=\"p-1 border rounded font-medium text-sm tracking-wide\"\r\n                                >\r\n                                    Edit Profile\r\n                                </Link>\r\n                                <button>\r\n                                    <Settings styles=\"h-7 w-7\"/>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex gap-2 sm:gap-8\">\r\n                            <div className=\"flex gap-1 items-center flex-col sm:flex-row\">\r\n                                <p className=\"font-medium\">{signedUser.posts.length}</p>\r\n                                <p>{`post${signedUser.posts.length === 1 ? \"\" : \"s\"}`}</p>\r\n                            </div>\r\n                            <button\r\n                                onClick={(event) => {\r\n                                    event.stopPropagation();\r\n                                    navigate(ProfileRoutes.FOLLOWERS)\r\n                                }}\r\n                                className=\"flex gap-1 items-center flex-col sm:flex-row\"\r\n                            >\r\n                                <p className=\"font-medium\">{signedUser.followers.length}</p>\r\n                                <p>{`follower${signedUser.followers.length === 1 ? \"\" : \"s\"}`}</p>\r\n                            </button>\r\n                            <button\r\n                                onClick={(event) => {\r\n                                    event.stopPropagation();\r\n                                    navigate(ProfileRoutes.FOLLOWING)\r\n                                }}\r\n                                className=\"flex gap-1 items-center flex-col sm:flex-row\"\r\n                            >\r\n                                <p className=\"font-medium\">{signedUser.following.length}</p>\r\n                                <p>following</p>\r\n                            </button>\r\n                        </div>\r\n                        <p className=\"font-medium\">{signedUser.fullName}</p>\r\n                        <div className=\"flex\"></div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    isImageModalOpen ?\r\n                        <Modal\r\n                            closeEvent={() => setIsImageModalOpen(false)}\r\n                            styles={`top-[35%] ${signedUser.profileImage.length ? \"h-72\" : \"h-60\"}`}\r\n                        >\r\n                            <ChangeImageModal\r\n                                closeEvent={() => setIsImageModalOpen(false)}\r\n                            />\r\n                        </Modal> :\r\n                        null\r\n                }\r\n                <ProfileNavBar isUsersPage={true} />\r\n                <Outlet />\r\n            </div>\r\n    )\r\n})\r\n\r\nexport default LoggedUsersProfile","import React, { useEffect, useState } from 'react'\r\nimport { Navigate, Outlet, useNavigate, useParams } from 'react-router-dom';\r\nimport ProfileRoutes from 'constants/profile-routes';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport useFollowers from 'helpers/hooks/useFollowers';\r\nimport { clearErrors, fetchUserOnPage } from 'redux-setup/features/userOnPage';\r\nimport { useAppDispatch, useAppSelector } from 'redux-setup/hooks';\r\nimport Additional from 'svgs/empty/Additional';\r\nimport Modal from 'components/modal/Modal';\r\nimport ProfileNavBar from '../other/ProfileNavBar';\r\nimport AreYouSureModal from 'components/modal/AreYouSureModal';\r\nimport useChatRoom from 'helpers/hooks/useChatRoom';\r\n\r\nconst UserOnPageProfile: React.FC = React.memo(() => {\r\n    const { user: userOnPage, status } = useAppSelector(state => state.userOnPage);\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { uid } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    const [shouldRedirect, setShouldRedirect] = useState<boolean>(false);\r\n    const [isUnfollowModalOpen, setIsUnfollowModalOpen] = useState<boolean>(false);\r\n\r\n    const { addToFollowing, removeFromFollowing } = useFollowers(userOnPage);\r\n    const { createChatRoom } = useChatRoom();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchUserOnPage(uid as string))\r\n    }, [uid])\r\n\r\n    useEffect(() => {\r\n        if (status === \"rejected\") {\r\n            dispatch(clearErrors());\r\n            setShouldRedirect(true);\r\n        }\r\n    }, [status])\r\n\r\n    return (\r\n        shouldRedirect ?\r\n            <Navigate to={RoutesTypes.NOT_FOUND} /> :\r\n            <div className=\"min-h-[calc(100vh-60px)] w-screen flex flex-col items-center back\">\r\n                <div className=\"flex items-center flex-col sm:flex-row w-full sm:w-3/4 lg:w-5/6 xl:w-4/5 justify-center gap-2 pt-4 pb-3 px-1\">\r\n                    <div className=\"w-full sm:w-2/5 sm:h-60 flex justify-center items-center\">\r\n                        <img\r\n                            src={userOnPage.profileImage.length ? userOnPage.profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"}\r\n                            className=\"rounded-full w-[170px] h-[170px] object-cover\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"flex flex-col w-5/6 sm:w-3/5 py-4 gap-6\">\r\n                        <div className=\"flex gap-4\">\r\n                            <p className=\"text-3xl font-extralight\">{userOnPage.username}</p>\r\n                            <div className=\"flex items-center gap-2\">\r\n                                <button\r\n                                    className=\"h-7 w-20 rounded border text-sm font-medium cursor-pointer\"\r\n                                    onClick={(event) => {\r\n                                        event.stopPropagation();\r\n                                        createChatRoom({ chosenUserId: userOnPage.userId });\r\n                                    }}\r\n                                >\r\n                                    Message\r\n                                </button>\r\n                                {\r\n                                    !loggedUser.username.length ?\r\n                                        null :\r\n                                        loggedUser.following.some(data => data.userId === userOnPage.userId) ?\r\n                                            <button\r\n                                                className=\"h-7 w-28 rounded border text-sm font-medium cursor-pointer\"\r\n                                                onClick={(event) => {\r\n                                                    event.stopPropagation();\r\n                                                    setIsUnfollowModalOpen(true);\r\n                                                }}\r\n                                            >\r\n                                                Following\r\n                                            </button> :\r\n                                            <button\r\n                                                className=\"h-7 w-20 bg-blue-500 font-medium text-white rounded cursor-pointer text-sm tracking-wide\"\r\n                                                onClick={(event) => {\r\n                                                    event.stopPropagation();\r\n                                                    addToFollowing();\r\n                                                }}\r\n                                            >\r\n                                                Follow\r\n                                            </button>\r\n                                }\r\n                                <button>\r\n                                    <Additional styles=\"h-7 w-7\"/>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex gap-2 sm:gap-8\">\r\n                            <div className=\"flex gap-1 items-center flex-col sm:flex-row\">\r\n                                <p className=\"font-medium\">{userOnPage.posts.length}</p>\r\n                                <p>{`post${userOnPage.posts.length === 1 ? \"\" : \"s\"}`}</p>\r\n                            </div>\r\n                            <button\r\n                                onClick={(event) => {\r\n                                    event.stopPropagation();\r\n                                    navigate(ProfileRoutes.FOLLOWERS)\r\n                                }}\r\n                                className=\"flex gap-1 items-center flex-col sm:flex-row\"\r\n                            >\r\n                                <p className=\"font-medium\">{userOnPage.followers.length}</p>\r\n                                <p>{`follower${userOnPage.followers.length === 1 ? \"\" : \"s\"}`}</p>\r\n                            </button>\r\n                            <button\r\n                                onClick={(event) => {\r\n                                    event.stopPropagation();\r\n                                    navigate(ProfileRoutes.FOLLOWING)\r\n                                }}\r\n                                className=\"flex gap-1 items-center flex-col sm:flex-row\"\r\n                            >\r\n                                <p className=\"font-medium\">{userOnPage.following.length}</p>\r\n                                <p>following</p>\r\n                            </button>\r\n                        </div>\r\n                        <p className=\"font-medium\">{userOnPage.fullName}</p>\r\n                        <div className=\"flex\"></div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    isUnfollowModalOpen ?\r\n                        <Modal\r\n                            closeEvent={() => setIsUnfollowModalOpen(false)}\r\n                            styles=\"h-72 top-[26.5%]\"\r\n                        >\r\n                            <AreYouSureModal\r\n                                areYouSureEvent={() => {\r\n                                    setIsUnfollowModalOpen(false)\r\n                                    removeFromFollowing()\r\n                                }}\r\n                                profileImage={userOnPage.profileImage}\r\n                                closeEvent={() => setIsUnfollowModalOpen(false)}\r\n                                questionText={`Unfollow @${userOnPage.username}`}\r\n                                buttonText=\"Unfollow\"\r\n                            />\r\n                        </Modal> :\r\n                        null\r\n                }\r\n                <ProfileNavBar isUsersPage={false} />\r\n                <Outlet />\r\n            </div>\r\n    )\r\n})\r\n\r\nexport default UserOnPageProfile","import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport Header from 'components/header/Header';\r\nimport LoggedUsersProfile from './components/user-page-types/LoggedUsersProfile';\r\nimport UserOnPageProfile from './components/user-page-types/UserOnPageProfile';\r\nimport Loading from 'pages/loading/Loading';\r\n\r\nconst DefineProfile: React.FC = React.memo(() => {\r\n    const { uid } = useParams();\r\n    const signedUser = useAppSelector(state => state.signedUser.user);\r\n\r\n    return (\r\n        // !signedUser.userId.length ?\r\n        //     <Loading /> :\r\n            <>\r\n                <Header />\r\n                {\r\n                    signedUser.userId === uid ?\r\n                        <LoggedUsersProfile /> :\r\n                        <UserOnPageProfile />\r\n                }\r\n            </>\r\n    )\r\n})\r\n\r\nexport default DefineProfile;","import React from 'react'\r\n\r\nconst Additional: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Additional"],"names":["ChangeImageModal","React","closeEvent","currentUser","useAppSelector","state","signedUser","user","dispatch","useAppDispatch","uploadImage","event","target","files","setIsBeingLoaded","imageUpload","profileImage","deleteImageRef","ref","storage","deleteObject","imageRef","name","v4","uploadBytes","getDownloadURL","imageUrl","updateDoc","doc","db","userId","setSignedUser","deleteImage","className","src","length","process","type","accept","onChange","onClick","undefined","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","isUsersPage","navigate","useNavigate","location","useLocation","defineLocation","pathNameArray","pathname","split","ProfileRoutes","useState","currentTab","setCurrentTab","useEffect","Saved","styles","includeHovering","Profile","status","uid","useParams","shouldRedirect","setShouldRedirect","isImageModalOpen","setIsImageModalOpen","fetchSignedUser","clearErrors","to","RoutesTypes","username","AccountsRoutes","Settings","posts","stopPropagation","followers","following","fullName","Modal","userOnPage","loggedUser","isUnfollowModalOpen","setIsUnfollowModalOpen","useFollowers","addToFollowing","removeFromFollowing","createChatRoom","useChatRoom","fetchUserOnPage","chosenUserId","some","data","Additional","AreYouSureModal","areYouSureEvent","questionText","buttonText","Header"],"sourceRoot":""}