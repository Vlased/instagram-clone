{"version":3,"file":"static/js/142.95970429.chunk.js","mappings":"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","sources":["pages/direct/components/navigation-bar/NewMessageModal.tsx","pages/direct/components/chat/NoChatSelected.tsx","svgs/empty/Text.tsx","pages/direct/components/navigation-bar/ChatLink.tsx","pages/direct/components/navigation-bar/UsersSection.tsx","pages/direct/Direct.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react'\r\nimport getUsers from 'helpers/other/get-users/getUsers';\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport Close from 'svgs/empty/Close'\r\nimport UserState from 'types/user-state-type';\r\nimport UserSuggestion from 'types/user-suggestion-type';\r\nimport UserToWriteTo from './UserToWriteTo';\r\nimport useChatRoom from 'helpers/hooks/useChatRoom';\r\n\r\nconst NewMessageModal: React.FC<{ closeEvent: () => void }> = React.memo(({ closeEvent }) => {\r\n  const signedUser = useAppSelector(state => state.signedUser.user);\r\n\r\n  const [wordEntering, setWordEntering] = useState<string>(\"\");\r\n  const [chosenUsers, setChosenUsers] = useState<UserSuggestion[]>([]);\r\n  const [filteredUsers, setFilteredUsers] = useState<UserState[]>([]);\r\n\r\n  const { createChatRoom } = useChatRoom();\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(async () => {\r\n      await getUsers(wordEntering, setFilteredUsers);\r\n      setFilteredUsers(prevUsers => prevUsers.filter(user => user.username !== signedUser.username));\r\n    }, 300)\r\n\r\n    return () => clearTimeout(handler);\r\n  }, [wordEntering])\r\n\r\n  const handleChosenClick = (chosenUser: UserSuggestion) => {\r\n    setChosenUsers(prevUsers => prevUsers.filter(user => user.username !== chosenUser.username))\r\n    if (inputRef.current !== null) {\r\n      inputRef.current.focus();\r\n    }\r\n  }\r\n\r\n  const chosenUsersElements = useMemo(() => chosenUsers.map(chosenUser => (\r\n    <div\r\n      className=\"bg-blue-100 flex rounded p-2\"\r\n      key={chosenUser.userId}\r\n    >\r\n      <button\r\n        className=\"flex gap-1\"\r\n        onClick={() => handleChosenClick(chosenUser)}\r\n      >\r\n        <p className=\"text-cyan-500 text-sm \">{chosenUser.username}</p>\r\n        <Close\r\n          styles=\"w-5 h-5 text-cyan-500\"\r\n        />\r\n      </button>\r\n    </div>\r\n  )), [chosenUsers, inputRef])\r\n\r\n  const addUserToList = (doc: UserState) => {\r\n    setChosenUsers(prevUsers => [...prevUsers, doc]);\r\n    setWordEntering(\"\");\r\n    if (inputRef.current !== null) {\r\n      inputRef.current.focus();\r\n    }\r\n  }\r\n\r\n  const removeUserFromList = (doc: UserState) => {\r\n    setChosenUsers(prevUsers => prevUsers.filter(user => user.username !== doc.username))\r\n    if (inputRef.current !== null) {\r\n      inputRef.current.focus();\r\n    }\r\n  }\r\n\r\n  const filteredUsersElements = useMemo(() => filteredUsers.map(doc => <UserToWriteTo\r\n    addUserToList={() => addUserToList(doc)}\r\n    removeUserFromList={() => removeUserFromList(doc)}\r\n    isUserInList={chosenUsers.some(user => user.username === doc.username)}\r\n    profileImage={doc.profileImage}\r\n    username={doc.username}\r\n    fullName={doc.fullName}\r\n    userId={doc.userId}\r\n    key={doc.userId}\r\n  />), [filteredUsers, chosenUsers])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"h-11 w-full flex justify-center items-center font-medium border-b relative \">\r\n        <button\r\n          className=\"absolute left-2\"\r\n          onClick={closeEvent}\r\n        >\r\n          <Close\r\n            styles=\"w-7 h-7\"\r\n          />\r\n        </button>\r\n        <p>New message</p>\r\n        <button\r\n          className={`absolute right-3 font-bold ${chosenUsers.length === 0 ? \"text-blue-300\" : \"text-blue-500\"}`}\r\n          disabled={chosenUsers.length === 0}\r\n          onClick={() => createChatRoom({ chosenUserId: chosenUsers[0].userId, closeEvent: closeEvent })}\r\n        >\r\n          <p>Next</p>\r\n        </button>\r\n      </div>\r\n      <div className=\"w-full max-h-[175px] flex border-b p-3 items-start gap-5\">\r\n        <p className=\"font-medium mt-[6px]\">To:</p>\r\n        <div className=\"w-full h-full flex flex-col items-start gap-2 overflow-hidden overflow-y-auto\">\r\n          {chosenUsersElements}\r\n          <input\r\n            className=\"w-full p-2 rounded-lg placeholder:font-light placeholder:text-gray-400 placeholder:text-sm relative text-sm\"\r\n            type=\"text\"\r\n            placeholder=\"Search...\"\r\n            value={wordEntering}\r\n            onChange={(event) => setWordEntering(event.target.value)}\r\n            ref={inputRef}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"flex flex-col overflow-hidden overflow-y-auto\">\r\n        {\r\n          !filteredUsers.length ?\r\n            <p className=\"font-medium text-sm pl-3 mt-2\">No Suggested</p> :\r\n            filteredUsersElements\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default NewMessageModal","import React from 'react'\r\n\r\nconst NoChatSelected: React.FC<{ openModal: () => void }> = React.memo(({ openModal }) => {\r\n    return (\r\n        <div className=\"w-full h-full flex flex-col justify-center items-center gap-1\">\r\n            <img\r\n                src={process.env.PUBLIC_URL + \"/images/direct.jpg\"}\r\n                className=\"w-[120px] h-[112px]\"\r\n                alt=\"direct\"\r\n            />\r\n            <p className=\"text-2xl font-thin\">Your Messages</p>\r\n            <p className=\"text-gray-400 text-sm\">Send private photos and messages to a friend or group.</p>\r\n            <button\r\n                className=\"h-[30px] w-[115px] mt-5 bg-blue-500 font-medium text-white rounded cursor-pointer text-sm tracking-wide flex items-center justify-center\"\r\n                onClick={openModal}\r\n            >\r\n                Send Message\r\n            </button>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default NoChatSelected","import React from 'react'\r\n\r\nconst Text: React.FC = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-[26px] w-[26px] text-gray-800\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Text","import { doc, getDoc } from 'firebase/firestore'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport RoutesTypes from 'constants/routes-types'\r\nimport { db } from 'firebase-setup/firebaseConfig'\r\nimport convertUnixTime from 'helpers/other/convert-unix-time/convertUnixTime'\r\n\r\ntype ChatLinkProps = {\r\n    userId: string,\r\n    chatId: string,\r\n    lastMessage: {\r\n        text: string,\r\n        userId: string\r\n    },\r\n    lastEdited: number;\r\n}\r\n\r\ntype UserInfoType = { \r\n    profileImage: string, \r\n    username: string \r\n}\r\n\r\nconst ChatLink: React.FC<ChatLinkProps> = React.memo(({ userId, chatId, lastMessage, lastEdited }) => {\r\n    const navigate = useNavigate();\r\n    const { chatId: chatParam } = useParams();\r\n\r\n    const [userInfo, setUserInfo] = useState<UserInfoType>({\r\n        profileImage: \"\",\r\n        username: \"\",\r\n    })\r\n\r\n    useEffect(() => {\r\n        const getUser = async () => {\r\n            const user = await getDoc(doc(db, \"users\", userId));\r\n            setUserInfo({\r\n                profileImage: (user.data() as UserInfoType).profileImage,\r\n                username: (user.data() as UserInfoType).username,\r\n            })\r\n        }\r\n\r\n        getUser();\r\n    }, [])\r\n\r\n    const generateTime = () => {\r\n        let time = convertUnixTime(lastEdited)\r\n        return time === \"Now\" ? time : time.split(\" \")[0] + time.split(\" \")[1][0]\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={`flex h-20 px-2 pr-6 items-center justify-center py-1 ${chatParam === chatId && \"back\"}`}\r\n            onClick={() => navigate(RoutesTypes.DIRECT + \"/\" + chatId)}\r\n        >\r\n            <div className=\"w-full h-16 py-[0.5px] gap-4 flex items-center px-3\">\r\n                <img\r\n                    src={userInfo.profileImage.length ? userInfo.profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"}\r\n                    className=\"h-[60px] w-[60px] rounded-full object-cover\"\r\n                />\r\n                <div className=\"flex flex-col justify-center text-left w-full\">\r\n                    <p className=\"w-[165px] truncate text-sm tracking-wide\">{userInfo.username}</p>\r\n                    <div className=\"flex gap-1\">\r\n                        <p className=\"font-medium text-sm tracking-wide whitespace-nowrap\">\r\n                            {`${lastMessage.userId !== userId && lastMessage.text.length ? \"You:\" : \" \"}`}\r\n                        </p>\r\n                        <p className=\"max-w-[125px] truncate text-gray-400 text-sm\">{lastMessage.text}</p>\r\n                        {\r\n                            lastMessage.userId.length !== 0 ?\r\n                                <>\r\n                                    <p className=\"text-sm text-gray-400\">•</p>\r\n                                    <p className=\"text-sm text-gray-400\">\r\n                                        {generateTime()}\r\n                                    </p>\r\n                                </> :\r\n                                null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </button>\r\n    )\r\n})\r\n\r\nexport default ChatLink","import { collection, getDocs, onSnapshot, query, where } from 'firebase/firestore';\r\nimport React, { useEffect, useMemo, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport { db } from 'firebase-setup/firebaseConfig';\r\nimport { useAppSelector } from 'redux-setup/hooks'\r\nimport Text from 'svgs/empty/Text';\r\nimport ChatLink from './ChatLink';\r\nimport ChatState from 'types/chat-state-type';\r\nimport UserLoader from 'components/other/UserLoader';\r\n\r\nconst UsersSection: React.FC<{ openModal: () => void }> = React.memo(({ openModal }) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const navigate = useNavigate();\r\n    const { chatId } = useParams();\r\n\r\n    const [chats, setChats] = useState<ChatState[]>([]);\r\n\r\n    useEffect(() => {\r\n        const getChats = async () => {\r\n            const chatsRef = collection(db, \"chats\");\r\n            const q1 = query(chatsRef, where(\"firstUserId\", \"==\", loggedUser.userId));\r\n            const q2 = query(chatsRef, where(\"secondUserId\", \"==\", loggedUser.userId));\r\n\r\n            const querySnapshot1 = await getDocs(q1);\r\n            const querySnapshot2 = await getDocs(q2);\r\n            const querySnapshot = querySnapshot1.docs\r\n                .map(doc => doc.data())\r\n                .concat(querySnapshot2.docs.map(doc => doc.data()))\r\n                \r\n            const chatsObjs = querySnapshot.map(doc => {\r\n                return ({\r\n                    firstUserId: doc.firstUserId,\r\n                    secondUserId: doc.secondUserId, \r\n                    messages: doc.messsages,\r\n                    lastMessage: doc.lastMessage,\r\n                    lastEdited: doc.lastEdited\r\n                })\r\n            })\r\n\r\n            setChats(chatsObjs.sort((a, b) => b.lastEdited - a.lastEdited))\r\n        }\r\n\r\n        onSnapshot(query(collection(db, \"chats\"), where(\"firstUserId\", \"==\", loggedUser.userId)), async () => {\r\n            await getChats();\r\n        })\r\n\r\n        onSnapshot(query(collection(db, \"chats\"), where(\"secondUserId\", \"==\", loggedUser.userId)), async () => {\r\n            await getChats();\r\n        })\r\n    }, [loggedUser.userId, chatId])\r\n\r\n    const generateSkeletons = () => {\r\n        const skeletons = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            skeletons.push(\r\n                <UserLoader\r\n                    key={i}\r\n                    imageStyles={{ width: 60, height: 60, borderRadius: \"50%\" }}\r\n                    firstTextStyles={{ width: 180, height: 11, borderRadius: \"10px\" }}\r\n                    secondTextStyles={{ width: 150, height: 11, borderRadius: \"10px\" }}\r\n                    margin=\"my-1\"\r\n                />\r\n            );\r\n        }\r\n\r\n        return skeletons\r\n    }\r\n\r\n    const chatLinks = useMemo(() => chats.map(chat => <ChatLink\r\n        chatId={chat.firstUserId + \"-\" + chat.secondUserId}\r\n        userId={loggedUser.userId === chat.firstUserId ? chat.secondUserId : chat.firstUserId}\r\n        lastMessage={chat.lastMessage}\r\n        lastEdited={chat.lastEdited}\r\n        key={loggedUser.userId === chat.firstUserId ? chat.secondUserId : chat.firstUserId}\r\n    />), [chats, loggedUser.userId])\r\n\r\n    return (\r\n        <aside className=\"w-full sm:w-[520px] h-full border-r flex flex-col\">\r\n            <div className=\"flex justify-end items-center h-[60px] border-b pr-4\">\r\n                <div\r\n                    className=\"w-full flex justify-center pl-4\"\r\n                >\r\n                    <button\r\n                        className=\"font-medium\"\r\n                        onClick={() => navigate(RoutesTypes.DIRECT)}\r\n                    >\r\n                        <p>@{loggedUser.username}</p>\r\n                    </button>\r\n                </div>\r\n                <button\r\n                    onClick={openModal}\r\n                >\r\n                    <Text />\r\n                </button>\r\n            </div>\r\n            <nav className=\"flex flex-col w-full h-[calc(100%-60px)] overflow-hidden overflow-y-auto\">\r\n                {\r\n                    chats.length ?\r\n                        chatLinks :\r\n                        generateSkeletons()\r\n                }\r\n            </nav>\r\n        </aside>\r\n    )\r\n})\r\n\r\nexport default UsersSection","import React, { useState } from 'react'\r\nimport { Outlet, useParams } from 'react-router-dom'\r\nimport NewMessageModal from 'pages/direct/components/navigation-bar/NewMessageModal'\r\nimport NoChatSelected from 'pages/direct/components/chat/NoChatSelected'\r\nimport UsersSection from 'pages/direct/components/navigation-bar/UsersSection'\r\nimport Header from 'components/header/Header'\r\nimport Modal from 'components/modal/Modal'\r\nimport useWindowWidth from 'helpers/hooks/useWindowWidth'\r\n\r\nconst Direct: React.FC = React.memo(() => {\r\n    const { chatId } = useParams();\r\n    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\r\n\r\n    const innerWidth = useWindowWidth();\r\n\r\n    return (\r\n        <div className=\"back w-screen h-screen flex flex-col items-center \">\r\n            <Header />\r\n            <section className=\"flex flex-col sm:flex-row gap-16 sm:gap-0 bg-white w-full md:w-11/12 lg:w-4/5 xl:w-2/3 h-[calc(100vh-90px)] max-w-[935px] border-x border-b border-t my-3\">\r\n                {\r\n                    innerWidth > 640 ?\r\n                        <>\r\n                            <UsersSection openModal={() => setIsModalOpen(true)} />\r\n                            {\r\n                                chatId ?\r\n                                    <Outlet /> :\r\n                                    <NoChatSelected openModal={() => setIsModalOpen(true)} />\r\n                            }\r\n                        </> :\r\n                        chatId ?\r\n                            <Outlet /> :\r\n                            <UsersSection openModal={() => setIsModalOpen(true)} />\r\n                }\r\n\r\n                {\r\n                    isModalOpen ?\r\n                        <Modal\r\n                            closeEvent={() => setIsModalOpen(false)}\r\n                            styles=\"h-[450px] top-[20%]\"\r\n                        >\r\n                            <NewMessageModal\r\n                                closeEvent={() => setIsModalOpen(false)}\r\n                            />\r\n                        </Modal> :\r\n                        null\r\n                }\r\n            </section>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Direct"],"names":["React","closeEvent","signedUser","useAppSelector","state","user","useState","wordEntering","setWordEntering","chosenUsers","setChosenUsers","filteredUsers","setFilteredUsers","createChatRoom","useChatRoom","inputRef","useRef","useEffect","handler","setTimeout","getUsers","prevUsers","filter","username","clearTimeout","chosenUsersElements","useMemo","map","chosenUser","className","onClick","current","focus","handleChosenClick","Close","styles","userId","filteredUsersElements","doc","UserToWriteTo","addUserToList","removeUserFromList","isUserInList","some","profileImage","fullName","length","disabled","chosenUserId","type","placeholder","value","onChange","event","target","ref","openModal","src","process","alt","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","ChatLink","chatId","lastMessage","lastEdited","navigate","useNavigate","chatParam","useParams","userInfo","setUserInfo","getUser","getDoc","db","data","RoutesTypes","text","time","convertUnixTime","split","generateTime","UsersSection","loggedUser","chats","setChats","getChats","chatsRef","collection","q1","query","where","q2","getDocs","querySnapshot1","querySnapshot2","querySnapshot","docs","concat","chatsObjs","firstUserId","secondUserId","messages","messsages","sort","a","b","onSnapshot","chatLinks","chat","skeletons","i","push","UserLoader","imageStyles","width","height","borderRadius","firstTextStyles","secondTextStyles","margin","generateSkeletons","isModalOpen","setIsModalOpen","innerWidth","useWindowWidth","Header","Modal"],"sourceRoot":""}