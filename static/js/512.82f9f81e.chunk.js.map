{"version":3,"file":"static/js/512.82f9f81e.chunk.js","mappings":"gSAEA,EAFe,SAACA,EAAaC,GAAd,OAA8BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,IAAQA,G,qECiFvF,EApE+CK,EAAAA,MAAW,YAAgE,IAA7DC,EAA4D,EAA5DA,aAAcC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YAC7FC,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QACtDC,GAAWC,EAAAA,EAAAA,MAEjB,GAAsDC,EAAAA,EAAAA,WAAkB,GAAxE,eAAOC,EAAP,KAA4BC,EAA5B,KACA,GAAgDC,EAAAA,EAAAA,GAAa,CAAEZ,OAAAA,IAAvDa,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,oBAExB,OACI,iBAAKC,UAAU,6DAAf,WACI,oBACIA,UAAU,mDACVC,QAAS,kBAAMT,EAASU,EAAAA,EAAAA,UAAwBjB,IAFpD,WAII,gBACIkB,IAAKrB,EAAasB,OAAStB,EAAeuB,kDAC1CL,UAAU,uCAEd,iBAAKA,UAAU,4BAAf,WACI,cAAGA,UAAU,sDAAb,SAAoEjB,KACpE,cAAGiB,UAAU,0CAAb,SACKd,EAAc,cAAgBF,UAKvCG,EAAWmB,UAAUC,MAAK,SAAAC,GAAI,OAAIA,EAAKvB,SAAWA,MAC9C,mBACIe,UAAU,2DACVC,QAAS,SAACQ,GACNA,EAAMC,kBACNd,GAAuB,IAJ/B,wBASA,mBACII,UAAU,yEACVC,QAAS,SAACQ,GACNA,EAAMC,kBACNZ,KAJR,oBAWJH,GACI,SAACgB,EAAA,EAAD,CACIC,WAAY,kBAAMhB,GAAuB,IACzCiB,OAAO,mBAFX,UAII,SAACC,EAAA,EAAD,CACIC,gBAAiB,WACbnB,GAAuB,GACvBG,KAEJjB,aAAcA,EACd8B,WAAY,kBAAMhB,GAAuB,IACzCoB,aAAY,mBAAcjC,GAC1BkC,WAAW,eAGnB,WC9DdC,EAAoBrC,EAAAA,MAAW,WACjC,IAAMM,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QAC5D,GAA8CG,EAAAA,EAAAA,UAAsB,IAApE,eAAOyB,EAAP,KAAwBC,EAAxB,KACM5B,GAAWC,EAAAA,EAAAA,OAEjB4B,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAc,mCAAG,mGACbC,GAAWC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,SAC1BC,GAAIC,EAAAA,EAAAA,IAAMJ,GAAUK,EAAAA,EAAAA,IAAM,WAAY,KAAM,KAF/B,UAGSC,EAAAA,EAAAA,IAAQH,GAHjB,OAMnB,IAHMI,EAHa,OAIfC,EAA6B,GAJd,aAOf,IAAMC,EAAQpD,EAAO,EAAGkD,EAAcG,KAAK7B,QACrC8B,EAAaJ,EAAcG,KAAKD,GAAOxB,OAGzCuB,EAAcI,OAAM,SAAA5C,GAAI,OAAIA,EAAKN,SAAWiD,EAAWjD,WACvDE,EAAWmB,UAAU6B,OAAM,SAAA5C,GAAI,OAAIA,EAAKN,SAAWiD,EAAWjD,WAC9DiD,EAAWjD,SAAWE,EAAWF,SAEjCmC,GAAmB,SAAAgB,GAAS,wBAAQA,GAAR,CAAmBF,OAC/CH,EAAa,kBAAOA,GAAP,CAAsBG,MAxB5B,IAcRH,EAAc3B,QAAgC,IANlC,2CAAH,qDAqBpBkB,MACD,IAEH,IAiBMe,GAAQC,EAAAA,EAAAA,UAAQ,kBAAMnB,EAAgBoB,KAAI,SAAA/B,GAAI,OAChD,mBAAC,GAAD,kBACQA,GADR,IAEIgC,IAAKhC,EAAKvB,OACVC,YAAasB,EAAKF,UAAUC,MAAK,SAAAhB,GAAI,OAAIA,EAAKN,SAAWE,EAAWF,kBAExE,CAACkC,IAEL,OACI,mBAAOnB,UAAU,gCAAjB,WACI,iBAAKA,UAAU,mEAAf,WACI,oBACIA,UAAU,mDACVC,QAAS,kBAAMT,EAASU,EAAAA,EAAAA,UAAwBf,EAAWF,SAF/D,WAII,gBACIkB,IAAKhB,EAAWL,aAAasB,OAASjB,EAAWL,aAAeuB,kDAChEL,UAAU,yCAEd,iBAAKA,UAAU,4BAAf,WACI,cAAGA,UAAU,sDAAb,SAAoEb,EAAWJ,YAC/E,cAAGiB,UAAU,0CAAb,SAAwDb,EAAWH,kBAG3E,mBACIgB,UAAU,+DADd,wBAMJ,iBAAKA,UAAU,mCAAf,WACI,cAAGA,UAAU,oCAAb,kCACA,SAAC,KAAD,CACIA,UAAU,sBACVyC,GAAIvC,EAAAA,EAAAA,OAFR,yBAOJ,gBAAKF,UAAU,2BAAf,SAxFe,IA0FPqC,EAAMjC,OACFiC,EA3DM,WAEtB,IADA,IAAMK,EAAY,GACTC,EAAI,EAAGA,EAlCG,EAkCqBA,IACpCD,EAAUE,MACN,SAACC,EAAA,EAAD,CAEIC,YAAa,CAAEC,MAAO,GAAIC,OAAQ,GAAIC,aAAc,OACpDC,gBAAiB,CAAEH,MAAO,IAAKC,OAAQ,EAAGC,aAAc,QACxDE,iBAAkB,CAAEJ,MAAO,GAAIC,OAAQ,EAAGC,aAAc,QACxDG,OAAO,cAJFT,IASjB,OAAOD,EA8CSW,MAGZ,iBAAKrD,UAAU,iDAAf,WACI,iBAAKA,UAAU,uBAAf,WACI,kCACA,iCACA,kCACA,gCACA,iCACA,oCACA,kCACA,qCACA,wCAEJ,cAAGA,UAAU,wBAAb,oDAMhB,I,sECrCA,EAzEoDnB,EAAAA,MAAW,YAA2B,IAAxB+B,EAAuB,EAAvBA,WAAY0C,EAAW,EAAXA,KACpE9D,GAAWC,EAAAA,EAAAA,MAETM,GAAwBF,EAAAA,EAAAA,GAAa,CAAEZ,OAAQqE,EAAKC,SAApDxD,oBAER,GAAgDL,EAAAA,EAAAA,WAAkB,GAAlE,eAAO8D,EAAP,KAAyBC,EAAzB,KAaA,OACI,iCACI,iBAAKzD,UAAU,2CAAf,WACI,mBACIA,UAAU,iHACVC,QAAS,WACLF,IACAa,KAJR,uBASA,mBACIZ,UAAU,qFACVC,QAAS,kBAAMT,EAASU,EAAAA,EAAAA,UAAwBoD,EAAKC,OAAS,IAAMG,EAAAA,EAAAA,KAAqBJ,EAAKK,SAFlG,yBAMA,mBACI3D,UAAU,qFACVC,QAAS,kBAAMwD,GAAoB,IAFvC,uBAMA,mBACIzD,UAAU,qFACVC,QArCG,WACf2D,UAAUC,UAAUC,UAChBC,OAAOC,SAASC,OAChB/D,EAAAA,EAAAA,UACAoD,EAAKC,OAAS,IACdG,EAAAA,EAAAA,KACAJ,EAAKK,QAET/C,KA2BQ,wBAMA,mBACIZ,UAAU,kGACVC,QAASW,EAFb,uBAQA4C,GACI,SAAC7C,EAAA,EAAD,CACIC,WAAY,kBAAM6C,GAAoB,IACtC5C,OAAO,sBAFX,UAII,SAACqD,EAAA,EAAD,CACItD,WAAY,kBAAM6C,GAAoB,IACtCU,YAAab,MAGrB,WCdpB,EAhD8CzE,EAAAA,MAAW,YAAyB,IAAtBuF,EAAqB,EAArBA,SAAUd,EAAW,EAAXA,KAC5D9D,GAAWC,EAAAA,EAAAA,MACjB,GAAsDC,EAAAA,EAAAA,WAAkB,GAAxE,eAAO2E,EAAP,KAA4BC,EAA5B,KAEA,OACI,iBAAKtE,UAAU,oDAAf,UAEQoE,EAASnF,OAAOmB,QACZ,oBACIJ,UAAU,+CACVC,QAAS,kBAAMT,EAASU,EAAAA,EAAAA,UAAwBkE,EAASnF,SAF7D,WAII,gBACIkB,IAAKiE,EAAStF,aAAasB,OAASgE,EAAStF,aAAeuB,mDAC5DL,UAAU,uCAEd,cAAGA,UAAU,0DAAb,SAAwEoE,EAASrF,eAErF,SAAC8D,EAAA,EAAD,CACIC,YAAa,CAAEC,MAAO,GAAIC,OAAQ,GAAIC,aAAc,OACpDC,gBAAiB,CAAEH,MAAO,IAAKC,OAAQ,EAAGC,aAAc,QACxDE,iBAAkB,CAAEJ,MAAO,GAAIC,OAAQ,EAAGC,aAAc,QACxDG,OAAO,UAGnB,mBACIpD,UAAU,OACVC,QAAS,kBAAMqE,GAAuB,IAF1C,UAII,SAACC,EAAA,EAAD,CAAY1D,OAAO,cAGnBwD,GACI,SAAC1D,EAAA,EAAD,CACIC,WAAY,kBAAM0D,GAAuB,IACzCzD,OAAO,iBAFX,UAII,SAAC,EAAD,CACID,WAAY,kBAAM0D,GAAuB,IACzChB,KAAMA,MAGd,WCzCdkB,EAA4B3F,EAAAA,MAAW,YAAmC,IAAhCsF,EAA+B,EAA/BA,YAAaM,EAAkB,EAAlBA,YACnDtF,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QAEtDmF,GAAcC,EAAAA,EAAAA,QAA0C,MAE9D,GAAgCjF,EAAAA,EAAAA,UAI7B,CACCX,SAAU,GACVD,aAAc,GACdG,OAAQ,KAPZ,eAAOmF,EAAP,KAAiBQ,EAAjB,KASA,GAAwClF,EAAAA,EAAAA,UAAiB,IAAzD,eAAOmF,EAAP,KAAqBC,EAArB,MAEAzD,EAAAA,EAAAA,YAAU,WACN,IAAM0D,EAAO,mCAAG,qGACQC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIxD,EAAAA,GAAI,QAAS0C,EAAYZ,SAD5C,OACNhE,EADM,OACsDiB,OAClEoE,GAAY,UAAKrF,IAFL,2CAAH,qDAKbwF,MACD,IAEH,IAAMG,GAAiBC,EAAAA,EAAAA,cAAY,kBAAMV,GAAY,SAACW,GAAD,OAAuBA,EAAM7C,KAAI,SAAAe,GAClF,OAAIA,EAAKK,SAAWQ,EAAYR,QACrB,kBAAKL,GAAZ,IAAkB+B,MAAM,GAAD,eAAM/B,EAAK+B,OAAX,CAAkB,CAAEpG,OAAQE,EAAWF,YAG3DqE,UACQ,CAACa,EAAYR,OAAQxE,EAAWF,SAE7CqG,GAAoBH,EAAAA,EAAAA,cAAY,kBAAMV,GAAY,SAACW,GAAD,OAAuBA,EAAM7C,KAAI,SAAAe,GACrF,OAAIA,EAAKK,SAAWQ,EAAYR,QACrB,kBAAKL,GAAZ,IAAkB+B,MAAO/B,EAAK+B,MAAME,QAAO,SAAAC,GAAG,OAAIA,EAAIvG,SAAWE,EAAWF,YAGzEqE,UACQ,CAACa,EAAYR,OAAQxE,EAAWF,SAOnD,OACI,qBAASe,UAAU,yDAAnB,WACI,SAAC,EAAD,CACIoE,SAAUA,EACVd,KAAMa,KAEV,gBAAKnE,UAAU,6DAAf,UACI,gBACIG,IAAKgE,EAAYsB,UACjBzF,UAAU,oCAGlB,SAAC0F,EAAA,EAAD,CACIvB,YAAaA,EACbO,YAAaA,EACbQ,eAAgBA,EAChBI,kBAAmBA,KAEvB,iBAAKtF,UAAU,wCAAf,WACI,eAAGA,UAAU,mBAAb,WACI,SAAC,KAAD,CACIA,UAAU,sBACVyC,GAAIvC,EAAAA,EAAAA,UAAwBkE,EAASnF,OAFzC,SAIKmF,EAASrF,YAEd,kBAAMiB,UAAU,UAAhB,UAA2B,IAAKmE,EAAYwB,YAEhD,SAAC,KAAD,CACI3F,UAAU,OACVyC,GAAIvC,EAAAA,EAAAA,UAAwBiE,EAAYZ,OAAS,IAAMG,EAAAA,EAAAA,KAAqBS,EAAYR,OAF5F,UAII,cAAG3D,UAAU,2CAAb,SArCa,WACzB,IAAM4F,EAAiBzB,EAAY0B,SAASzF,OAC5C,MAAM,YAAN,OAAmBwF,EAAeE,WAAWC,QAAQ,wBAAyB,KAA9E,mBAAgH,IAAnBH,EAAuB,GAAK,KAoCxGI,WAIb,SAACC,EAAA,EAAD,CAAMC,UAAW/B,EAAY+B,aAC7B,SAACC,EAAA,EAAD,CACIxC,OAAQQ,EAAYR,OACpBkB,aAAcA,EACdC,gBAAiBA,EACjBJ,YAAaA,EACb0B,kBAAmBjC,EAAYZ,eAM/C,ICvGM8C,EAAqBxH,EAAAA,MAAW,WAClC,IAAMM,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QACtDwD,GAAQuD,EAAAA,EAAAA,KAEd,GAA0C5G,EAAAA,EAAAA,UAA4B,MAAtE,eAAO6G,EAAP,KAAsBC,EAAtB,MAEAnF,EAAAA,EAAAA,YAAU,WACN,IAAMoF,EAAQ,mCAAG,qGACPlF,GAAWC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,SAC1BC,GAAIC,EAAAA,EAAAA,IAAMJ,GAAUK,EAAAA,EAAAA,IAAM,SAAU,KAAMzC,EAAWmB,UAAUiC,KAAI,SAAAmE,GAAO,OAAIA,EAAQzH,YAF/E,UAGe4C,EAAAA,EAAAA,IAAQH,GAHvB,OAGPI,EAHO,OAKPO,EAAQP,EAAcG,KAAKM,KAAI,SAAA0C,GAAG,OAAIA,EAAIzE,UAC1CmG,EAAWtE,EAAMuE,QAAO,SAACC,EAAmBtH,GAE9C,OADAA,EAAK6F,MAAM0B,SAAQ,SAAAxD,GAAI,OAAIuD,EAAMjE,KAAKU,MAC/BuD,IACR,IAEGE,EAAeJ,EAASK,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEhB,UAAYe,EAAEf,aAAWiB,MAAM,EApBrE,IAqBTC,QAAQC,IAAIN,GACZP,EAAiBO,GAbJ,4CAAH,qDAgBX5H,EAAWmB,UAAUF,OACpBqG,IAGAD,EAAiB,MAEtB,IAEH,IAAMc,GAAkBhF,EAAAA,EAAAA,UAAQ,yBAAMiE,QAAN,IAAMA,OAAN,EAAMA,EAAehE,KAAI,SAAAe,GAAI,OACzD,SAAC,EAAD,CACIa,YAAab,EACbmB,YAAa+B,GACRlD,EAAKK,OAASL,EAAKC,aAE5B,CAACgD,IAEL,OACKA,GAOG,0BACI,iBAAKvG,UAAS,2CAAsC+C,EAAQ,IAAM,YAAc,UAAhF,UACKuE,GACD,iBAAKtH,UAAU,+CAAf,WACI,gBACIG,IAAKE,mCACLL,UAAU,UAEd,cAAGA,UAAU,UAAb,mCACA,cAAGA,UAAU,wBAAb,mEAfZ,gBAAKA,UAAS,eAAU+C,EAAQ,IAAM,YAAc,SAAtC,qCAAd,UACI,gBACIwE,MAAO,CAAE,eAAkB,eAC3BvH,UAAU,oFAmB9B,I,UCxCA,EAvB4BnB,EAAAA,MAAW,WACnC,IAAMM,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,QACtDiI,GAAclB,EAAAA,EAAAA,KAEpB,OACKnH,EAAWF,OAAOmB,OAEdqH,EAAAA,GAAAA,aAEG,iBAAKzH,UAAU,0EAAf,WACI,SAAC0H,EAAA,EAAD,KACA,iBAAK1H,UAAS,gFAAd,WACI,SAAC,EAAD,IAEIwH,EAAc,KACV,SAAC,EAAD,IACA,YARhB,SAAC,KAAD,CAAU/E,GAAIvC,EAAAA,EAAAA,SAFlB,SAACyH,EAAA,QAAD,Q,mDCfNA,EAAoB9I,EAAAA,MAAW,WACnC,OACM,iBAAKmB,UAAU,sEAAf,WACI,gBAAKA,UAAU,UACf,0BACI,gBACIG,IAAKE,2CACLL,UAAU,YAGlB,0BACI,gBACIG,IAAKE,wCACLL,UAAU,iBAO9B,a,0CCZA,IARiD,SAAC,GAAgB,IAAda,EAAa,EAAbA,OAChD,OACI,gBAAK+G,MAAM,6BAA6B5H,UAAWa,EAAQgH,KAAK,OAAOC,QAAQ,YAAYC,OAAO,eAAeC,YAAa,EAA9H,UACI,iBAAMC,cAAc,QAAQC,eAAe,QAAQC,EAAE","sources":["helpers/other/generate-random/generateRandom.ts","pages/dashboard/components/sidebar/components/Suggestion.tsx","pages/dashboard/components/sidebar/Sidebar.tsx","pages/dashboard/components/timeline/components/SettingsModal.tsx","pages/dashboard/components/timeline/components/PostHeader.tsx","pages/dashboard/components/timeline/components/Post.tsx","pages/dashboard/components/timeline/Timeline.tsx","pages/dashboard/Dashboard.tsx","pages/loading/Loading.tsx","svgs/empty/Additional.tsx"],"sourcesContent":["const random = (min: number, max: number) => Math.floor(Math.random() * (max - min)) + min;\r\n\r\nexport default random","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport useFollowers from 'helpers/hooks/useFollowers';\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport UserSuggestionType from 'types/user-suggestion-type';\r\nimport Modal from 'components/modal/Modal';\r\nimport AreYouSureModal from 'components/modal/AreYouSureModal';\r\n\r\ninterface ISuggestionProps extends UserSuggestionType {\r\n    isFollowing: boolean;\r\n}\r\n\r\nconst Suggestion: React.FC<ISuggestionProps> = React.memo(({ profileImage, username, fullName, userId, isFollowing }) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const navigate = useNavigate();\r\n\r\n    const [isUnfollowModalOpen, setIsUnfollowModalOpen] = useState<boolean>(false);\r\n    const { addToFollowing, removeFromFollowing } = useFollowers({ userId })\r\n\r\n    return (\r\n        <div className=\"flex w-full h-8 mb-1 justify-between items-center my-[4px]\">\r\n            <button \r\n                className=\"w-full h-full py-[0.5px] gap-2 flex items-center\"\r\n                onClick={() => navigate(RoutesTypes.DASHBOARD + userId)}\r\n            >\r\n                <img\r\n                    src={profileImage.length ? profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"}\r\n                    className=\"h-8 w-8 rounded-full object-cover\"\r\n                />\r\n                <div className=\"flex flex-col items-start\">\r\n                    <p className=\"font-medium text-sm tracking-wide whitespace-nowrap\">{username}</p>\r\n                    <p className=\"text-gray-400 text-sm whitespace-nowrap\">\r\n                        {isFollowing ? \"Follows you\" : fullName}\r\n                    </p>\r\n                </div>\r\n            </button>\r\n            {\r\n                loggedUser.following.some(data => data.userId === userId) ?\r\n                    <button\r\n                        className=\"rounded text-gray-800 text-sm font-medium cursor-pointer\"\r\n                        onClick={(event) => {\r\n                            event.stopPropagation();\r\n                            setIsUnfollowModalOpen(true);\r\n                        }}\r\n                    >\r\n                        Following\r\n                    </button> :\r\n                    <button\r\n                        className=\"font-medium text-cyan-500 rounded cursor-pointer text-sm tracking-wide\"\r\n                        onClick={(event) => {\r\n                            event.stopPropagation();\r\n                            addToFollowing();\r\n                        }}\r\n                    >\r\n                        Follow\r\n                    </button>\r\n            }\r\n            {\r\n                isUnfollowModalOpen ?\r\n                    <Modal\r\n                        closeEvent={() => setIsUnfollowModalOpen(false)}\r\n                        styles=\"h-72 top-[26.5%]\"\r\n                    >\r\n                        <AreYouSureModal\r\n                            areYouSureEvent={() => {\r\n                                setIsUnfollowModalOpen(false)\r\n                                removeFromFollowing()\r\n                            }}\r\n                            profileImage={profileImage}\r\n                            closeEvent={() => setIsUnfollowModalOpen(false)}\r\n                            questionText={`Unfollow ${username}`}\r\n                            buttonText=\"Unfollow\"\r\n                        />\r\n                    </Modal> :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Suggestion","import UserLoader from 'components/other/UserLoader';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport { db } from 'firebase-setup/firebaseConfig';\r\nimport { collection, getDocs, query, where } from 'firebase/firestore';\r\nimport random from 'helpers/other/generate-random/generateRandom';\r\nimport React, { useEffect, useMemo, useState } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport UserState from 'types/user-state-type';\r\nimport Suggestion from './components/Suggestion';\r\n\r\nconst SUGGESTIONS_LENGTH = 5;\r\n\r\nconst Sidebar: React.FC = React.memo(() => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const [suggestionsInfo, setSuggestionsInfo] = useState<UserState[]>([]);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const getSuggestions = async () => {\r\n            const usersRef = collection(db, \"users\");\r\n            const q = query(usersRef, where(\"username\", \">=\", \"\"));\r\n            const querySnapshot = await getDocs(q);\r\n            let docsContainer: UserState[] = [];\r\n\r\n            while (docsContainer.length !== SUGGESTIONS_LENGTH) {\r\n                const index = random(0, querySnapshot.docs.length);\r\n                const currentDoc = querySnapshot.docs[index].data() as UserState;\r\n\r\n                if (\r\n                    docsContainer.every(user => user.userId !== currentDoc.userId) &&\r\n                    loggedUser.following.every(user => user.userId !== currentDoc.userId) &&\r\n                    currentDoc.userId !== loggedUser.userId\r\n                ) {\r\n                    setSuggestionsInfo(prevUsers => [...prevUsers, currentDoc])\r\n                    docsContainer = [...docsContainer, currentDoc];\r\n                }\r\n            }\r\n        }\r\n\r\n        getSuggestions();\r\n    }, [])\r\n\r\n    const generateSkeletons = () => {\r\n        const skeletons = [];\r\n        for (let i = 0; i < SUGGESTIONS_LENGTH; i++) {\r\n            skeletons.push(\r\n                <UserLoader\r\n                    key={i}\r\n                    imageStyles={{ width: 32, height: 32, borderRadius: \"50%\" }}\r\n                    firstTextStyles={{ width: 120, height: 7, borderRadius: \"10px\" }}\r\n                    secondTextStyles={{ width: 80, height: 7, borderRadius: \"10px\" }}\r\n                    margin=\"ml-[-13px]\"\r\n                />\r\n            );\r\n        }\r\n\r\n        return skeletons\r\n    }\r\n\r\n    const users = useMemo(() => suggestionsInfo.map(data => (\r\n        <Suggestion\r\n            {...data}\r\n            key={data.userId}\r\n            isFollowing={data.following.some(user => user.userId === loggedUser.userId)}\r\n        />\r\n    )), [suggestionsInfo])\r\n\r\n    return (\r\n        <aside className=\"flex flex-col gap-4 w-[325px]\">\r\n            <div className=\"flex w-full h-13 mb-1 px-3 justify-between items-center my-[4px]\">\r\n                <button\r\n                    className=\"w-full h-full py-[0.5px] gap-2 flex items-center\"\r\n                    onClick={() => navigate(RoutesTypes.DASHBOARD + loggedUser.userId)}\r\n                >\r\n                    <img\r\n                        src={loggedUser.profileImage.length ? loggedUser.profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-gray.jpg\"}\r\n                        className=\"h-11 w-11 rounded-full object-cover\"\r\n                    />\r\n                    <div className=\"flex flex-col items-start\">\r\n                        <p className=\"font-medium text-sm tracking-wide whitespace-nowrap\">{loggedUser.username}</p>\r\n                        <p className=\"text-gray-400 text-sm whitespace-nowrap\">{loggedUser.fullName}</p>\r\n                    </div>\r\n                </button>\r\n                <button\r\n                    className=\"h-7 rounded text-cyan-500 text-sm font-medium cursor-pointer\"\r\n                >\r\n                    Switch\r\n                </button>\r\n            </div>\r\n            <div className=\"flex w-full justify-between px-3\">\r\n                <p className=\"text-gray-500 font-medium text-sm\">Suggestions For You</p>\r\n                <Link\r\n                    className=\"text-sm font-medium\"\r\n                    to={RoutesTypes.PEOPLE}\r\n                >\r\n                    See All\r\n                </Link>\r\n            </div>\r\n            <div className=\"flex flex-col gap-2 px-3\">\r\n                {\r\n                    users.length === SUGGESTIONS_LENGTH ?\r\n                        users :\r\n                        generateSkeletons()\r\n                }\r\n            </div>\r\n            <div className=\"flex flex-col gap-4 text-xs text-gray-300 px-3\">\r\n                <div className=\"flex flex-wrap gap-2\">\r\n                    <p>About</p>\r\n                    <p>Help</p>\r\n                    <p>Press</p>\r\n                    <p>API</p>\r\n                    <p>Jobs</p>\r\n                    <p>Privacy</p>\r\n                    <p>Terms</p>\r\n                    <p>Location</p>\r\n                    <p>Language</p>\r\n                </div>\r\n                <p className=\"text-xs text-gray-300\">© 2022 INSTAGRAM FROM META</p>\r\n            </div>\r\n        </aside>\r\n    )\r\n})\r\n\r\nexport default Sidebar","import React, { useState } from 'react'\r\nimport useFollowers from 'helpers/hooks/useFollowers';\r\nimport PostType from 'types/post-type';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport ProfileRoutes from 'constants/profile-routes';\r\nimport Modal from 'components/modal/Modal';\r\nimport SharePostModal from 'components/modal/SharePostModal';\r\n\r\ntype SettingsModalProps = {\r\n    closeEvent: () => void;\r\n    post: PostType\r\n}\r\n\r\nconst SettingsModal: React.FC<SettingsModalProps> = React.memo(({ closeEvent, post }) => {\r\n    const navigate = useNavigate();\r\n    \r\n    const { removeFromFollowing } = useFollowers({ userId: post.fromId })\r\n\r\n    const [isShareModalOpen, setIsShareModalOpen] = useState<boolean>(false);\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(\r\n            window.location.origin +\r\n            RoutesTypes.DASHBOARD +\r\n            post.fromId + \"/\" +\r\n            ProfileRoutes.POST +\r\n            post.postId\r\n        );\r\n        closeEvent();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"h-full w-full flex flex-col items-center\">\r\n                <button\r\n                    className=\"w-full active:bg-gray-300 h-12 flex items-center justify-center text-rose-600 font-medium text-sm rounded-t-xl\"\r\n                    onClick={() => {\r\n                        removeFromFollowing()\r\n                        closeEvent()\r\n                    }}\r\n                >\r\n                    Unfollow\r\n                </button>\r\n                <button\r\n                    className=\"w-full active:bg-gray-300 h-12 border-t-2 flex items-center justify-center text-sm\"\r\n                    onClick={() => navigate(RoutesTypes.DASHBOARD + post.fromId + \"/\" + ProfileRoutes.POST + post.postId)}\r\n                >\r\n                    Go to post\r\n                </button>\r\n                <button\r\n                    className=\"w-full active:bg-gray-300 h-12 border-t-2 flex items-center justify-center text-sm\"\r\n                    onClick={() => setIsShareModalOpen(true)}\r\n                >\r\n                    Share to\r\n                </button>\r\n                <button\r\n                    className=\"w-full active:bg-gray-300 h-12 border-t-2 flex items-center justify-center text-sm\"\r\n                    onClick={handleCopy}\r\n                >\r\n                    Copy link\r\n                </button>\r\n                <button\r\n                    className=\"w-full active:bg-gray-300 h-12 border-t-2 flex items-center justify-center text-sm rounded-b-xl\"\r\n                    onClick={closeEvent}\r\n                >\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n            {\r\n                isShareModalOpen ?\r\n                    <Modal\r\n                        closeEvent={() => setIsShareModalOpen(false)}\r\n                        styles=\"h-[450px] top-[20%]\"\r\n                    >\r\n                        <SharePostModal\r\n                            closeEvent={() => setIsShareModalOpen(false)}\r\n                            currentPost={post}\r\n                        />\r\n                    </Modal> :\r\n                    null\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\n\r\nexport default SettingsModal\r\n","import Modal from 'components/modal/Modal';\r\nimport UserLoader from 'components/other/UserLoader';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Additional from 'svgs/empty/Additional';\r\nimport PostType from 'types/post-type';\r\nimport SettingsModal from './SettingsModal';\r\n\r\ntype PostHeaderProps = {\r\n    userInfo: {\r\n        username: string,\r\n        profileImage: string,\r\n        userId: string\r\n    },\r\n    post: PostType\r\n}\r\n\r\nconst PostHeader: React.FC<PostHeaderProps> = React.memo(({ userInfo, post }) => {\r\n    const navigate = useNavigate();\r\n    const [isSettingsModalOpen, setIsSettingsModalOpen] = useState<boolean>(false);\r\n\r\n    return (\r\n        <div className=\"w-full flex justify-between border-b items-center\">\r\n            {\r\n                userInfo.userId.length ?\r\n                    <button\r\n                        className=\"h-14 py-[0.5px] gap-4 flex items-center px-3\"\r\n                        onClick={() => navigate(RoutesTypes.DASHBOARD + userInfo.userId)}\r\n                    >\r\n                        <img\r\n                            src={userInfo.profileImage.length ? userInfo.profileImage : process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"}\r\n                            className=\"h-9 w-9 rounded-full object-cover\"\r\n                        />\r\n                        <p className=\"font-medium text-[14px] tracking-wide whitespace-nowrap\">{userInfo.username}</p>\r\n                    </button> :\r\n                    <UserLoader\r\n                        imageStyles={{ width: 36, height: 36, borderRadius: \"50%\" }}\r\n                        firstTextStyles={{ width: 100, height: 7, borderRadius: \"10px\" }}\r\n                        secondTextStyles={{ width: 80, height: 7, borderRadius: \"10px\" }}\r\n                        margin=\"my-1\"\r\n                    />\r\n            }\r\n            <button\r\n                className=\"mr-4\"\r\n                onClick={() => setIsSettingsModalOpen(true)}\r\n            >\r\n                <Additional styles=\"h-5 w-5\" />\r\n            </button>\r\n            {\r\n                isSettingsModalOpen ?\r\n                    <Modal\r\n                        closeEvent={() => setIsSettingsModalOpen(false)}\r\n                        styles=\"top-[35%] h-60\"\r\n                    >\r\n                        <SettingsModal\r\n                            closeEvent={() => setIsSettingsModalOpen(false)}\r\n                            post={post}\r\n                        />\r\n                    </Modal> :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default PostHeader","import Time from 'components/other/Time'\r\nimport CommentForm from 'components/post/CommentForm'\r\nimport LikesBar from 'components/post/LikesBar'\r\nimport ProfileRoutes from 'constants/profile-routes'\r\nimport RoutesTypes from 'constants/routes-types'\r\nimport { db } from 'firebase-setup/firebaseConfig'\r\nimport { doc, getDoc } from 'firebase/firestore'\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { useAppSelector } from 'redux-setup/hooks'\r\nimport PostType from 'types/post-type'\r\nimport UserState from 'types/user-state-type'\r\nimport PostHeader from './PostHeader'\r\n\r\ntype PostProps = {\r\n    currentPost: PostType\r\n    changePosts: any\r\n}\r\n\r\nconst Post: React.FC<PostProps> = React.memo(({ currentPost, changePosts }) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n\r\n    const commentsRef = useRef<React.RefObject<HTMLInputElement>>(null);\r\n\r\n    const [userInfo, setUserInfo] = useState<{\r\n        username: string,\r\n        profileImage: string,\r\n        userId: string\r\n    }>({\r\n        username: \"\",\r\n        profileImage: \"\",\r\n        userId: \"\"\r\n    })\r\n    const [wordEntering, setWordEntering] = useState<string>(\"\");\r\n\r\n    useEffect(() => {\r\n        const getUser = async () => {\r\n            const user = (await getDoc(doc(db, \"users\", currentPost.fromId))).data() as UserState;\r\n            setUserInfo({ ...user })\r\n        }\r\n\r\n        getUser();\r\n    }, [])\r\n\r\n    const changePostsAdd = useCallback(() => changePosts((posts: PostType[]) => posts.map(post => {\r\n        if (post.postId === currentPost.postId) {\r\n            return { ...post, likes: [...post.likes, { userId: loggedUser.userId }] }\r\n        }\r\n\r\n        return post\r\n    }) as PostType[]), [currentPost.postId, loggedUser.userId])\r\n\r\n    const changePostsRemove = useCallback(() => changePosts((posts: PostType[]) => posts.map(post => {\r\n        if (post.postId === currentPost.postId) {\r\n            return { ...post, likes: post.likes.filter(obj => obj.userId !== loggedUser.userId) }\r\n        }\r\n\r\n        return post\r\n    }) as PostType[]), [currentPost.postId, loggedUser.userId])\r\n\r\n    const handleCommentsAmount = () => {\r\n        const commentsAmount = currentPost.comments.length\r\n        return `View all ${commentsAmount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} comment${commentsAmount === 1 ? \"\" : \"s\"}`\r\n    }\r\n\r\n    return (\r\n        <article className=\"w-full h-full flex flex-col bg-white border rounded-xl\">\r\n            <PostHeader\r\n                userInfo={userInfo}\r\n                post={currentPost}\r\n            />\r\n            <div className=\"w-full bg-black h-[400px] flex items-center justify-center\">\r\n                <img\r\n                    src={currentPost.postImage}\r\n                    className=\"h-full w-full object-contain\"\r\n                />\r\n            </div>\r\n            <LikesBar\r\n                currentPost={currentPost}\r\n                commentsRef={commentsRef}\r\n                changePostsAdd={changePostsAdd}\r\n                changePostsRemove={changePostsRemove}\r\n            />\r\n            <div className=\"w-full flex flex-col px-3 items-start\">\r\n                <p className=\"break-words mx-1\">\r\n                    <Link\r\n                        className=\"font-medium text-sm\"\r\n                        to={RoutesTypes.DASHBOARD + userInfo.userId}\r\n                    >\r\n                        {userInfo.username}\r\n                    </Link>\r\n                    <span className=\"text-sm\">{\" \"}{currentPost.text}</span>\r\n                </p>\r\n                <Link\r\n                    className=\"pl-1\"\r\n                    to={RoutesTypes.DASHBOARD + currentPost.fromId + \"/\" + ProfileRoutes.POST + currentPost.postId}\r\n                >\r\n                    <p className=\"text-sm text-gray-400 mt-1 tracking-wide\">\r\n                        {handleCommentsAmount()}\r\n                    </p>\r\n                </Link>\r\n            </div>\r\n            <Time createdAt={currentPost.createdAt} />\r\n            <CommentForm\r\n                postId={currentPost.postId}\r\n                wordEntering={wordEntering}\r\n                setWordEntering={setWordEntering}\r\n                commentsRef={commentsRef}\r\n                currentPostFromId={currentPost.fromId}\r\n            />\r\n        </article>\r\n    )\r\n})\r\n\r\nexport default Post","import { db } from 'firebase-setup/firebaseConfig';\r\nimport { collection, getDocs, query, where } from 'firebase/firestore';\r\nimport useWindowWidth from 'helpers/hooks/useWindowWidth'\r\nimport React, { useEffect, useMemo, useState } from 'react'\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport PostType from 'types/post-type';\r\nimport UserState from 'types/user-state-type';\r\nimport Post from './components/Post';\r\n\r\nconst POSTS_AMOUNT = 20;\r\n\r\nconst Timeline: React.FC = React.memo(() => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const width = useWindowWidth();\r\n\r\n    const [postsToRender, setPostsToRender] = useState<PostType[] | null>(null);\r\n\r\n    useEffect(() => {\r\n        const getPosts = async () => {\r\n            const usersRef = collection(db, \"users\");\r\n            const q = query(usersRef, where(\"userId\", \"in\", loggedUser.following.map(userObj => userObj.userId)));\r\n            const querySnapshot = await getDocs(q);\r\n\r\n            const users = querySnapshot.docs.map(doc => doc.data()) as UserState[]\r\n            const allPosts = users.reduce((accum: PostType[], user: UserState) => {\r\n                user.posts.forEach(post => accum.push(post));\r\n                return accum\r\n            }, [])\r\n\r\n            const currentPosts = allPosts.sort((a, b) => b.createdAt - a.createdAt).slice(0, POSTS_AMOUNT);\r\n            console.log(currentPosts)\r\n            setPostsToRender(currentPosts)\r\n        }\r\n\r\n        if(loggedUser.following.length){\r\n            getPosts();\r\n        }\r\n        else{\r\n            setPostsToRender([])\r\n        }\r\n    }, [])\r\n\r\n    const postsComponents = useMemo(() => postsToRender?.map(post => (\r\n        <Post\r\n            currentPost={post}\r\n            changePosts={setPostsToRender}\r\n            key={post.postId + post.fromId}\r\n        />\r\n    )), [postsToRender])\r\n\r\n    return (\r\n        !postsToRender ?\r\n            <div className={`h-32 ${width > 500 ? \"w-[470px]\" : \"w-full\"} flex items-center justify-center`}>\r\n                <div\r\n                    style={{ \"borderTopColor\": \"transparent\" }}\r\n                    className=\"w-16 h-16 border-4 border-gray-700 border-dashed rounded-full animate-spin\"\r\n                ></div>\r\n            </div> :\r\n            <div>\r\n                <div className={`flex flex-col items-center gap-4 ${width > 500 ? \"w-[470px]\" : \"w-full\"}`}>\r\n                    {postsComponents}\r\n                    <div className=\"w-full flex flex-col items-center mt-8 mb-14\">\r\n                        <img\r\n                            src={process.env.PUBLIC_URL + \"/images/done.jpg\"}\r\n                            className=\"w-16\"\r\n                        />\r\n                        <p className=\"text-lg\">You're all caught up</p>\r\n                        <p className=\"text-sm text-gray-400\">You've seen all new posts from the past days</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n})\r\n\r\nexport default Timeline","import React from 'react';\r\nimport Header from 'components/header/Header';\r\nimport Sidebar from 'pages/dashboard/components/sidebar/Sidebar';\r\nimport Timeline from 'pages/dashboard/components/timeline/Timeline';\r\nimport useWindowWidth from 'helpers/hooks/useWindowWidth';\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport Loading from 'pages/loading/Loading';\r\nimport { Navigate } from 'react-router-dom';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport { auth } from 'firebase-setup/firebaseConfig';\r\n\r\nconst Dashboard: React.FC = React.memo(() => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const windowWidth = useWindowWidth();\r\n\r\n    return (\r\n        !loggedUser.userId.length ?\r\n            <Loading /> :\r\n            !auth.currentUser ?\r\n                <Navigate to={RoutesTypes.LOGIN} /> :\r\n                <div className=\"bg-[#f7f7f7] overflow-hidden overflow-y-auto flex flex-col items-center\">\r\n                    <Header />\r\n                    <div className={`min-h-[calc(100vh-60px)] w-[100%] flex justify-center bg-[#f7f7f7] pt-6 gap-6`}>\r\n                        <Timeline />\r\n                        {\r\n                            windowWidth > 950 ?\r\n                                <Sidebar /> :\r\n                                null\r\n                        }\r\n                    </div>\r\n                </div>\r\n    )\r\n})\r\n\r\nexport default Dashboard;\r\n","import React from 'react'\r\n\r\nconst Loading: React.FC = React.memo(() => {\r\n  return (\r\n        <div className=\"w-[100vw] h-[100vh] py-8 flex flex-col items-center justify-between\">\r\n            <div className=\"h-12\"></div>\r\n            <div>\r\n                <img \r\n                    src={process.env.PUBLIC_URL + \"/images/loading-logo.jpg\"}\r\n                    className=\"h-28\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <img\r\n                    src={process.env.PUBLIC_URL + \"/images/from-meta.jpg\"}\r\n                    className=\"h-16\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Loading","import React from 'react'\r\n\r\nconst Additional: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Additional"],"names":["min","max","Math","floor","random","React","profileImage","username","fullName","userId","isFollowing","loggedUser","useAppSelector","state","signedUser","user","navigate","useNavigate","useState","isUnfollowModalOpen","setIsUnfollowModalOpen","useFollowers","addToFollowing","removeFromFollowing","className","onClick","RoutesTypes","src","length","process","following","some","data","event","stopPropagation","Modal","closeEvent","styles","AreYouSureModal","areYouSureEvent","questionText","buttonText","Sidebar","suggestionsInfo","setSuggestionsInfo","useEffect","getSuggestions","usersRef","collection","db","q","query","where","getDocs","querySnapshot","docsContainer","index","docs","currentDoc","every","prevUsers","users","useMemo","map","key","to","skeletons","i","push","UserLoader","imageStyles","width","height","borderRadius","firstTextStyles","secondTextStyles","margin","generateSkeletons","post","fromId","isShareModalOpen","setIsShareModalOpen","ProfileRoutes","postId","navigator","clipboard","writeText","window","location","origin","SharePostModal","currentPost","userInfo","isSettingsModalOpen","setIsSettingsModalOpen","Additional","Post","changePosts","commentsRef","useRef","setUserInfo","wordEntering","setWordEntering","getUser","getDoc","doc","changePostsAdd","useCallback","posts","likes","changePostsRemove","filter","obj","postImage","LikesBar","text","commentsAmount","comments","toString","replace","handleCommentsAmount","Time","createdAt","CommentForm","currentPostFromId","Timeline","useWindowWidth","postsToRender","setPostsToRender","getPosts","userObj","allPosts","reduce","accum","forEach","currentPosts","sort","a","b","slice","console","log","postsComponents","style","windowWidth","auth","Header","Loading","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d"],"sourceRoot":""}