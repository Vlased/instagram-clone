{"version":3,"file":"static/js/646.fdeaec28.chunk.js","mappings":"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","sources":["firebase-setup/isEmailAvailable.ts","firebase-setup/isUsernameAvailable.ts","pages/sign-up/components/SignUpOne.tsx","pages/sign-up/components/SignUpTwo.tsx","pages/sign-up/SignUp.tsx"],"sourcesContent":["import { collection, getDocs } from \"firebase/firestore\";\r\nimport { db } from \"./firebaseConfig\";\r\n\r\nconst isEmailAvailable = async (email: string): Promise<boolean> => {\r\n    const allUsers = await getDocs(collection(db, \"users\"));\r\n    let isAvailable: boolean = true;\r\n\r\n    allUsers.forEach(user => {\r\n        const emailOfUser: string = user.data().emailAddress\r\n        if(emailOfUser === email){\r\n            isAvailable = false;\r\n            return;\r\n        }\r\n    })\r\n\r\n    return isAvailable;\r\n}\r\n\r\nexport default isEmailAvailable;","import { collection, getDocs } from \"firebase/firestore\";\r\nimport { db } from \"./firebaseConfig\";\r\n\r\nconst isUsernameAvailable = async (name: string): Promise<boolean> => {\r\n    const allUsers = await getDocs(collection(db, \"users\"));\r\n    let isAvailable: boolean = true;\r\n\r\n    allUsers.forEach(user => {\r\n        const nameOfUser: string = user.data().username\r\n        if(nameOfUser === name){\r\n            isAvailable = false;\r\n            return;\r\n        }\r\n    })\r\n\r\n    return isAvailable;\r\n}\r\n\r\nexport default isUsernameAvailable;","import React, { useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport RoutesTypes from \"constants/routes-types\"\r\nimport isEmailAvailable from 'firebase-setup/isEmailAvailable';\r\nimport isUsernameAvailable from \"firebase-setup/isUsernameAvailable\";\r\nimport UserData from \"types/user-data-type\";\r\n\r\ntype SignUpOneProps = {\r\n    setCurrentPageId: React.Dispatch<React.SetStateAction<number>>\r\n    userData: UserData,\r\n    setUserData: React.Dispatch<React.SetStateAction<UserData>>\r\n}\r\n\r\nconst SignUpOne: React.FC<SignUpOneProps> = ({ setCurrentPageId, userData, setUserData }) => {\r\n    const [error, setError] = useState<string>(\"\");\r\n    const [showPassword, setShowPassword] = useState<boolean>(false);\r\n    const isInvalid = userData.password.length < 6\r\n        || userData.emailOrPhoneNumber.length < 6\r\n        || userData.username.length < 6\r\n        || userData.fullName.length < 6\r\n\r\n    const handleSignUp = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.preventDefault();\r\n\r\n        const isNameAvailable = await isUsernameAvailable(userData.username);\r\n        if (!isNameAvailable) {\r\n            setError(\"This username is not available\");\r\n            return;\r\n        }\r\n\r\n        const isEmailAddressAvailable = await isEmailAvailable(userData.emailOrPhoneNumber);\r\n        if (!isEmailAddressAvailable) {\r\n            setError(\"Another account is using the same email\");\r\n            return;\r\n        }\r\n\r\n        const isEmailValid = userData.emailOrPhoneNumber.match(\r\n            /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n        );\r\n\r\n        if (!isEmailValid) {\r\n            setError(\"Enter a valid email address.\");\r\n            return;\r\n        }\r\n\r\n        setCurrentPageId(prevVal => prevVal + 1)\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-4/5 sm:w-1/2 lg:w-1/3\">\r\n            <div className=\"flex flex-col items-center w-full border bg-white\">\r\n                <div className=\"flex justify-center w-full\">\r\n                    <img\r\n                        src=\"/images/instagram-logo.webp\"\r\n                        className=\"w-6/12 mt-6\"\r\n                    />\r\n                </div>\r\n                <p className=\"w-4/5 pb-4 text-center text-gray-400 font-semibold\">Sign up to see photos and videos from your friends</p>\r\n                {\r\n                    error ? <p className=\"mb-4 w-4/5 text-sm text-red-500 text-center\">{error}</p>:\r\n                    null\r\n                }\r\n                <form\r\n                    method=\"POST\"\r\n                    className=\"flex flex-col items-center w-full\"\r\n                >\r\n                    <input\r\n                        aria-label=\"Enter your email address or phone number\"\r\n                        className=\"text-sm w-4/5 py-5 px-4 h-2 border rounded mb-2 bg-[#fcfafa]\"\r\n                        type={userData.emailOrPhoneNumber.includes(\"@\") ? \"email\" : \"text\"}\r\n                        placeholder=\"Mobile phone or email\"\r\n                        value={userData.emailOrPhoneNumber}\r\n                        onChange={(event) => setUserData(prevData => ({ ...prevData, emailOrPhoneNumber: event.target.value }))}\r\n                    />\r\n                    <input\r\n                        aria-label=\"Enter your full name\"\r\n                        className=\"text-sm w-4/5 py-5 px-4 h-2 border rounded mb-2 bg-[#fcfafa]\"\r\n                        type=\"text\"\r\n                        placeholder=\"Full name\"\r\n                        value={userData.fullName}\r\n                        onChange={(event) => setUserData(prevData => ({ ...prevData, fullName: event.target.value }))}\r\n                    />\r\n                    <input\r\n                        aria-label=\"Enter your username\"\r\n                        className=\"text-sm w-4/5 py-5 px-4 h-2 border rounded mb-2 bg-[#fcfafa]\"\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        value={userData.username}\r\n                        onChange={(event) => setUserData(prevData => ({ ...prevData, username: event.target.value }))}\r\n                    />\r\n                    <div className=\"w-4/5 border rounded flex items-center bg-[#fcfafa] mb-4\">\r\n                        <input\r\n                            aria-label=\"Enter your password\"\r\n                            className=\"text-sm w-full py-5 px-4 h-2 bg-[#fcfafa]\"\r\n                            type={showPassword ? \"text\" : \"password\"}\r\n                            placeholder=\"Password\"\r\n                            value={userData.password}\r\n                            onChange={(event) => setUserData(prevData => ({ ...prevData, password: event.target.value }))}\r\n                            autoComplete=\"on\"\r\n                        />\r\n                        {\r\n                            userData.password.length !== 0 &&\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => setShowPassword(prevVal => !prevVal)}\r\n                                className=\"w-1/5 h-1/2 text-sm bg-red font-medium rounded\"\r\n                            >\r\n                                {showPassword ? \"Hide\" : \"Show\"}\r\n                            </button>\r\n                        }\r\n                    </div>\r\n                    <p className=\"w-4/5 text-center text-gray-400 text-sm mb-4\">\r\n                        People who use our service may have uploaded your contact information to Instagram\r\n                    </p>\r\n                    <button\r\n                        disabled={isInvalid}\r\n                        type=\"button\"\r\n                        className={`\r\n                            bg-blue-500 w-4/5 text-white rounded h-8 mb-8 font-bold \r\n                            ${isInvalid && \"opacity-50\"}\r\n                        `}\r\n                        onClick={event => handleSignUp(event)}\r\n                    >\r\n                        Sign up\r\n                    </button>\r\n                </form>\r\n            </div>\r\n            <div className=\"flex w-full border bg-white mt-4 py-2 justify-center\">\r\n                <p className=\"text-sm\">\r\n                    Have an account?{' '}\r\n                    <Link to={RoutesTypes.LOGIN} className=\"font-bold text-blue-400\">\r\n                        Sign in\r\n                    </Link>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpOne;","import React, { useMemo, useState } from 'react';\r\nimport UserData from \"types/user-data-type\";\r\nimport BirthdateState from \"types/birthdate-type\";\r\nimport { Link } from \"react-router-dom\";\r\nimport RoutesTypes from \"constants/routes-types\";\r\n\r\ntype SignUpTwoProps = {\r\n    setCurrentPageId: React.Dispatch<React.SetStateAction<number>>\r\n    setUserData: React.Dispatch<React.SetStateAction<UserData>>\r\n}\r\n\r\nconst SignUpTwo: React.FC<SignUpTwoProps> = ({ setCurrentPageId, setUserData }) => {\r\n    let arrayOfMonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    \r\n    const generateArrayOfYears = () => {\r\n        let result = [];\r\n        for(let i = new Date().getFullYear(); i > 1919; i--){\r\n            result.push(i);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    const generateArrayOfDays = () => {\r\n        let result = [];\r\n\r\n        let amountOfDays = 0;\r\n        switch(arrayOfMonths.indexOf(birthdate.month)){\r\n            case 0:\r\n            case 2: \r\n            case 4: \r\n            case 6: \r\n            case 7: \r\n            case 9: \r\n            case 11: {\r\n                amountOfDays = 31;\r\n                break;\r\n            }\r\n            case 1: {\r\n                amountOfDays = birthdate.year % 4 ? 28 : 29;\r\n                break;\r\n            }\r\n            default: {\r\n                amountOfDays = 30;\r\n                break;\r\n            }\r\n        }\r\n\r\n        for(let i = 1; i <= amountOfDays; i++){\r\n            result.push(i);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    const [birthdate, setBirthdate] = useState<BirthdateState>({\r\n        day: new Date().getDate() ,\r\n        month: arrayOfMonths[new Date().getMonth()],\r\n        year: new Date().getFullYear() - 1,\r\n    })\r\n\r\n    const isInvalid = useMemo(() => new Date().getFullYear() - birthdate.year > 5 ? false: true, [birthdate])\r\n\r\n    return (\r\n        <div className=\"w-4/5 sm:w-3/5 lg:w-1/3\">\r\n            <div className=\"flex flex-col items-center w-full border bg-white px-2\">\r\n                <div className=\"flex justify-center w-full\">\r\n                    <img\r\n                        src=\"/images/cake.jpg\"\r\n                        className=\"w-5/12 mt-6\"\r\n                    />\r\n                </div>\r\n                <p className=\"text-black font-medium\">Add Your Birthday</p>\r\n                <p className=\"mt-4 mb-3\">This won't be a part of your public profile.</p>\r\n                <form\r\n                    method=\"POST\"\r\n                    className=\"flex flex-col items-center w-full mb-4\"\r\n                >\r\n                    <div className=\"w-3/4 flex justify-center gap-2 mb-1\">\r\n                        <select\r\n                            className=\"border rounded text-sm p-1\"\r\n                            value={birthdate.month}\r\n                            onChange={(event) => setBirthdate(prevData => ({ ...prevData, month: event.target.value }))}\r\n                        >\r\n                            {arrayOfMonths.map((month, index) => <option key={index}>{month}</option>)}\r\n                        </select>\r\n                        <select\r\n                            className=\"border rounded text-sm p-1\"\r\n                            value={birthdate.day}\r\n                            onChange={(event) => setBirthdate(prevData => ({ ...prevData, day: Number(event.target.value) }))}\r\n                        >\r\n                            {generateArrayOfDays().map((day, index) => <option key={index}>{day}</option>)}\r\n                        </select>\r\n                        <select\r\n                            className=\"border rounded text-sm p-1\"\r\n                            value={birthdate.year}\r\n                            onChange={(event) => setBirthdate(prevData => ({ ...prevData, year: Number(event.target.value) }))}\r\n                        >\r\n                            {generateArrayOfYears().map((year, index) => <option key={index}>{year}</option>)}\r\n                        </select>\r\n                    </div>\r\n                    <p className=\"w-4/5 text-center text-gray-400 text-sm mb-4\">You need to enter the date you were born</p>\r\n                    <p className=\"w-4/5 text-center text-gray-400 text-sm mb-4\">Use your own birthday, even if this account is for a business, a pet, or something else</p>\r\n                    <button\r\n                        disabled={isInvalid}\r\n                        type=\"button\"\r\n                        className={`\r\n                            bg-blue-500 w-3/5 text-white rounded h-8 font-bold \r\n                            ${isInvalid && \"opacity-50\"}\r\n                        `}\r\n                        onClick={() => {\r\n                            setUserData(prevData => ({ ...prevData, birthdate }))\r\n                            setCurrentPageId(prevVal => prevVal + 1)\r\n                        }}\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </form>\r\n                <button \r\n                    className=\"w-1/5 mb-6 font-bold text-blue-400\"\r\n                    onClick={() => setCurrentPageId(prevVal => prevVal - 1)}\r\n                >\r\n                    Go Back\r\n                </button>\r\n            </div>\r\n            <div className=\"flex w-full border bg-white mt-4 py-2 justify-center\">\r\n                <p className=\"text-sm\">\r\n                    Have an account?{' '}\r\n                    <Link to={RoutesTypes.LOGIN} className=\"font-bold text-blue-400\">\r\n                        Sign in\r\n                    </Link>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpTwo;","import React, { useEffect, useState } from \"react\";\r\nimport SignUpOne from \"pages/sign-up/components/SignUpOne\";\r\nimport SignUpTwo from \"pages/sign-up/components/SignUpTwo\";\r\nimport BirthdateState from \"types/birthdate-type\";\r\nimport UserData from \"types/user-data-type\";\r\nimport { createUserWithEmailAndPassword } from \"firebase/auth\";\r\nimport { auth, db } from \"firebase-setup/firebaseConfig\";\r\nimport { doc, setDoc } from \"firebase/firestore\"; \r\nimport { useAppDispatch } from \"redux-setup/hooks\";\r\nimport { setSignedUser } from \"redux-setup/features/signedUser\";\r\nimport UserState from \"types/user-state-type\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\nimport RoutesTypes from \"constants/routes-types\";\r\n\r\nconst LAST_PAGE_ID = 2;\r\n\r\nconst SignUp: React.FC = () => {\r\n    const dispatch = useAppDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const [shouldRedirect, setShouldRedirect] = useState<boolean>(false);\r\n    const [currentPageId, setCurrentPageId] = useState<number>(0)\r\n    const [userData, setUserData] = useState<UserData>({\r\n        username: \"\",\r\n        fullName: \"\",\r\n        emailOrPhoneNumber: \"\",\r\n        password: \"\",\r\n        birthdate: {} as BirthdateState,\r\n    })\r\n\r\n    const handleSignUp = async () => {\r\n        try {\r\n            const user = await createUserWithEmailAndPassword(auth, userData.emailOrPhoneNumber, userData.password);\r\n\r\n            const userDoc: UserState = {\r\n                userId: user.user.uid,\r\n                username: userData.username.toLowerCase(),\r\n                fullName: userData.fullName,\r\n                emailAddress: userData.emailOrPhoneNumber.toLowerCase(),\r\n                following: [],\r\n                followers: [],\r\n                dateCreated: new Date().getTime(),\r\n                birthdate: userData.birthdate,\r\n                phoneNumber: \"\",\r\n                profileImage: \"\",\r\n                posts: [],\r\n                savedPosts: [],\r\n            }\r\n            \r\n            await setDoc(doc(db, \"users\", user.user.uid), userDoc)\r\n\r\n            dispatch(setSignedUser(userDoc));\r\n            navigate(RoutesTypes.DASHBOARD);\r\n        }\r\n        catch (error: any) {\r\n            setShouldRedirect(true);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (currentPageId === LAST_PAGE_ID) {\r\n            handleSignUp();\r\n        }\r\n    }, [currentPageId])\r\n\r\n    const generatePages = () => {\r\n        switch (currentPageId) {\r\n            case 0: {\r\n                return <SignUpOne {...{ setCurrentPageId, userData, setUserData }} />\r\n            }\r\n            case 1: {\r\n                return <SignUpTwo {...{ setCurrentPageId, setUserData }} />\r\n            }\r\n            default: {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        shouldRedirect ?\r\n            <Navigate to={RoutesTypes.NOT_FOUND} /> :\r\n            <div className=\"h-screen w-screen flex justify-center items-center bg-[#FAFAFA]\">\r\n                {generatePages()}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default SignUp;"],"names":["isEmailAvailable","email","getDocs","collection","db","allUsers","isAvailable","forEach","user","data","emailAddress","isUsernameAvailable","name","username","setCurrentPageId","userData","setUserData","useState","error","setError","showPassword","setShowPassword","isInvalid","password","length","emailOrPhoneNumber","fullName","handleSignUp","event","preventDefault","match","prevVal","className","src","method","type","includes","placeholder","value","onChange","prevData","target","autoComplete","onClick","disabled","to","RoutesTypes","arrayOfMonths","day","Date","getDate","month","getMonth","year","getFullYear","birthdate","setBirthdate","useMemo","map","index","Number","result","amountOfDays","indexOf","i","push","generateArrayOfDays","generateArrayOfYears","dispatch","useAppDispatch","navigate","useNavigate","shouldRedirect","setShouldRedirect","currentPageId","createUserWithEmailAndPassword","auth","userDoc","userId","uid","toLowerCase","following","followers","dateCreated","getTime","phoneNumber","profileImage","posts","savedPosts","setDoc","doc","setSignedUser","console","log","useEffect","generatePages"],"sourceRoot":""}