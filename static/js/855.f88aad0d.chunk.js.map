{"version":3,"file":"static/js/855.f88aad0d.chunk.js","mappings":"yQAUMA,EAAkBC,EAAAA,MAAW,WAC/B,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAEjB,GAA0BC,EAAAA,EAAAA,UAAiB,IAA3C,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAiB,IAAjD,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA0BJ,EAAAA,EAAAA,UAAiB,IAA3C,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAwCN,EAAAA,EAAAA,WAAkB,GAA1D,eAAOO,EAAP,KAAqBC,EAArB,KAEMC,EAAYN,EAASO,OAAS,IAAMT,EAEpCU,EAAW,mCAAG,WAAOC,GAAP,gFAChBA,EAAMC,iBADU,mBAIOC,EAAAA,EAAAA,IAA2BC,EAAAA,GAAMd,EAAOE,GAJ/C,cAINa,EAJM,iBAKaC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASH,EAAKA,KAAKI,MAL/C,OAKNC,EALM,OAMZvB,GAASwB,EAAAA,EAAAA,IAAcD,EAAWE,SAClC3B,EAAS4B,EAAAA,EAAAA,WAPG,kDAUZtB,EAAS,IACTE,EAAY,IACZE,EAAS,KAAMmB,SACfC,QAAQC,IAAR,MAbY,0DAAH,sDAiBjB,OACI,gBAAKC,UAAU,yBAAf,UACI,iBAAKA,UAAU,+DAAf,WACI,gBAAKA,UAAU,oBAAf,UACI,gBACIC,IAAI,kCACJD,UAAU,mBAGlB,iBAAKA,UAAU,kCAAf,WACI,iBAAKA,UAAU,oDAAf,WACI,gBAAKA,UAAU,kCAAf,UACI,gBACIC,IAAI,8BACJD,UAAU,kBAIdvB,GACA,cAAGuB,UAAU,kCAAb,SAAgDvB,IAChD,MAEJ,kBACIyB,OAAO,OACPF,UAAU,oCAFd,WAII,kBACI,aAAW,2BACXA,UAAU,+DACVG,KAAK,OACLC,YAAY,gBACZC,MAAOhC,EACPiC,SAAU,SAACtB,GAAD,OAAWV,EAASU,EAAMuB,OAAOF,WAE/C,iBAAKL,UAAU,2DAAf,WACI,kBACI,aAAW,sBACXQ,aAAa,KACbR,UAAU,4CACVG,KAAMxB,EAAe,OAAS,WAC9ByB,YAAY,WACZC,MAAO9B,EACP+B,SAAU,SAACtB,GAAD,OAAWR,EAAYQ,EAAMuB,OAAOF,UAG1B,IAApB9B,EAASO,SACT,mBACIqB,KAAK,SACLM,QAAS,kBAAM7B,GAAgB,SAAA8B,GAAO,OAAKA,MAC3CV,UAAU,iDAHd,SAKKrB,EAAe,OAAS,aAIrC,mBACIgC,SAAU9B,EACVsB,KAAK,SACLH,UAAS,8IAEHnB,GAAa,aAFV,sCAIT4B,QAAS,SAACzB,GAAD,OAAWD,EAAYC,IAPpC,2BAaR,gBAAKgB,UAAU,uDAAf,UACI,eAAGA,UAAU,UAAb,mCAC2B,KACvB,SAAC,KAAD,CAAMY,GAAIhB,EAAAA,EAAAA,QAAqBI,UAAU,0BAAzC,qCAW5B","sources":["pages/login/Login.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\r\nimport { auth, db } from \"firebase-setup/firebaseConfig\";\r\nimport RoutesTypes from \"constants/routes-types\";\r\nimport { useAppDispatch } from \"redux-setup/hooks\";\r\nimport { setSignedUser } from \"redux-setup/features/signedUser\";\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\nimport UserState from \"types/user-state-type\";\r\n\r\nconst Login: React.FC = React.memo(() => {\r\n    const navigate = useNavigate();\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [email, setEmail] = useState<string>(\"\");\r\n    const [password, setPassword] = useState<string>(\"\");\r\n    const [error, setError] = useState<string>(\"\");\r\n    const [showPassword, setShowPassword] = useState<boolean>(false);\r\n\r\n    const isInvalid = password.length < 6 || !email;\r\n\r\n    const handleLogin = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.preventDefault();\r\n        \r\n        try {\r\n            const user = await signInWithEmailAndPassword(auth, email, password);\r\n            const currentDoc = await getDoc(doc(db, \"users\", user.user.uid))\r\n            dispatch(setSignedUser(currentDoc.data() as UserState));\r\n            navigate(RoutesTypes.DASHBOARD);\r\n        } \r\n        catch (error: any) {\r\n            setEmail('');\r\n            setPassword('');\r\n            setError(error.message);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"h-screen w-screen back\">\r\n            <div className=\"container flex mx-auto max-w-screen-md items-center h-screen\">\r\n                <div className=\"flex w-0 lg:w-3/5\">\r\n                    <img\r\n                        src=\"/images/iphone-with-profile.jpg\"\r\n                        className=\"lg:max-w-sm\"\r\n                    />\r\n                </div>\r\n                <div className=\"w-4/5 sm:w-3/5 lg:w-1/2 mx-auto\">\r\n                    <div className=\"flex flex-col items-center w-full border bg-white\">\r\n                        <div className=\"flex justify-center w-full pb-4\">\r\n                            <img\r\n                                src=\"/images/instagram-logo.webp\"\r\n                                className=\"w-6/12 mt-6\"\r\n                            />\r\n                        </div>\r\n                        {\r\n                            error ? \r\n                            <p className=\"mb-4 w-4/5 text-xs text-red-500\">{error}</p>:\r\n                            null\r\n                        }\r\n                        <form\r\n                            method=\"POST\"\r\n                            className=\"flex flex-col items-center w-full\"\r\n                        >\r\n                            <input\r\n                                aria-label=\"Enter your email address\"\r\n                                className=\"text-sm w-4/5 py-5 px-4 h-2 border rounded mb-2 bg-[#fcfafa]\"\r\n                                type=\"text\"\r\n                                placeholder=\"Email address\"\r\n                                value={email}\r\n                                onChange={(event) => setEmail(event.target.value)}\r\n                            />\r\n                            <div className=\"w-4/5 border rounded mb-6 flex items-center bg-[#fcfafa]\">\r\n                                <input\r\n                                    aria-label=\"Enter your password\"\r\n                                    autoComplete=\"on\"\r\n                                    className=\"text-sm w-full py-5 px-4 h-2 bg-[#fcfafa]\"\r\n                                    type={showPassword ? \"text\" : \"password\"}\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(event) => setPassword(event.target.value)}\r\n                                />\r\n                                {\r\n                                    password.length !== 0 &&\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        onClick={() => setShowPassword(prevVal => !prevVal)}\r\n                                        className=\"w-1/5 h-1/2 text-sm bg-red font-medium rounded\"\r\n                                    >\r\n                                        {showPassword ? \"Hide\" : \"Show\"}\r\n                                    </button>\r\n                                }\r\n                            </div>\r\n                            <button\r\n                                disabled={isInvalid}\r\n                                type=\"submit\"\r\n                                className={`\r\n                                    bg-blue-500 w-4/5 text-white rounded h-8 mb-8 font-bold \r\n                                    ${isInvalid && \"opacity-50\"}\r\n                                `}\r\n                                onClick={(event) => handleLogin(event)}\r\n                            >\r\n                                Log In\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"flex w-full border bg-white mt-8 py-2 justify-center\">\r\n                        <p className=\"text-sm\">\r\n                            Don't have an account?{' '}\r\n                            <Link to={RoutesTypes.SIGN_UP} className=\"font-bold text-blue-400\">\r\n                                Sign up\r\n                            </Link>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Login;"],"names":["Login","React","navigate","useNavigate","dispatch","useAppDispatch","useState","email","setEmail","password","setPassword","error","setError","showPassword","setShowPassword","isInvalid","length","handleLogin","event","preventDefault","signInWithEmailAndPassword","auth","user","getDoc","doc","db","uid","currentDoc","setSignedUser","data","RoutesTypes","message","console","log","className","src","method","type","placeholder","value","onChange","target","autoComplete","onClick","prevVal","disabled","to"],"sourceRoot":""}