{"version":3,"file":"static/js/923.c7c3e688.chunk.js","mappings":"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","sources":["components/modal/Modal.tsx","components/other/DropMenu.tsx","components/other/UserLoader.tsx","svgs/empty/ArrowToLeft.tsx","svgs/empty/ArrowToRight.tsx","pages/profile/components/post-modal-page/components/PostsModalNavigation.tsx","pages/profile/hooks/usePosts.ts","pages/profile/components/post-modal-page/components/UserHeader.tsx","helpers/hooks/useCommentLikes.ts","pages/profile/components/post-modal-page/components/Comment.tsx","pages/profile/components/post-modal-page/components/PostComments.tsx","pages/profile/hooks/useUIChanges.ts","pages/profile/components/post-modal-page/PostModalPage.tsx","components/routes/PostModalPageRoute.tsx","helpers/hooks/useWindowWidth.ts","helpers/other/get-users/getUsers.ts","svgs/empty/Close.tsx","svgs/empty/Direct.tsx","svgs/empty/Saved.tsx","svgs/empty/Smile.tsx"],"sourcesContent":["import React, { useCallback, useEffect } from 'react'\r\nimport { motion } from 'framer-motion';\r\nimport Close from 'svgs/empty/Close';\r\n\r\ntype ModalProps = {\r\n    children: React.ReactNode;\r\n    closeEvent: () => void;\r\n    styles: string\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = React.memo(({ children, closeEvent, styles }) => {\r\n    useEffect(() => {\r\n        document.body.classList.add(\"overflow-hidden\");\r\n        return () => document.body.classList.remove(\"overflow-hidden\");\r\n    }, [])\r\n\r\n    const clickHandler = useCallback((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        event.stopPropagation()\r\n        closeEvent()\r\n    }, [])\r\n\r\n    const stopPropagation = useCallback((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        event.stopPropagation()\r\n    }, [])\r\n\r\n    return (\r\n        <div\r\n            className=\"w-screen h-screen bg-[rgba(0,0,0,0.6)] fixed top-0 left-0 flex items-center justify-center z-50\"\r\n            onClick={clickHandler}\r\n        >\r\n            <motion.div\r\n                className={`${styles.includes(\"w-\") ? \"\" : \"w-64 sm:w-96\"} absolute flex flex-col bg-white rounded-xl z-50 ${styles}`}\r\n                initial={{ scale: 1.2 }}\r\n                animate={{ scale: 1 }}\r\n                transition={{ duration: 0.12 }}\r\n                onClick={stopPropagation}\r\n            >\r\n                {children}\r\n            </motion.div>\r\n            <div className=\"absolute top-4 right-4 cursor-pointer\">\r\n                <Close styles=\"w-[25px] h-[25px] text-white\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Modal","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\ntype DropMenuProps = {\r\n  children: React.ReactNode;\r\n  closeEvent: (() => void) | ((event: any) => void);\r\n  styles: string;\r\n  noAnimation?: boolean;\r\n}\r\n\r\nconst DropMenu: React.FC<DropMenuProps> = React.memo(({ children, closeEvent, styles, noAnimation }) => {\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"w-screen h-screen fixed top-0 left-0\"\r\n        onClick={closeEvent}\r\n      ></div>\r\n      <motion.div\r\n        className={`bg-white flex items-center rounded-lg drop-shadow-md absolute flex-col z-50 ${styles}`}\r\n        {...(\r\n          !noAnimation ?\r\n            {\r\n              initial: { y: -50 },\r\n              animate: { y: 0 },\r\n              exit: { y: 50 }\r\n            } :\r\n            {}\r\n        )}\r\n      >\r\n        {children}\r\n      </motion.div>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default DropMenu","import React from 'react';\r\nimport { RectShape } from 'react-placeholder/lib/placeholders';\r\n\r\ntype UserLoaderType = {\r\n    imageStyles: object, \r\n    firstTextStyles: object,\r\n    secondTextStyles: object,\r\n    margin?: string,\r\n}\r\n\r\nconst UserLoader: React.FC<UserLoaderType> = React.memo(({ imageStyles, firstTextStyles, secondTextStyles, margin }) => {\r\n    return (\r\n        <div className={`flex px-[2px] pr-6 items-center justify-center py-1 ${margin ? margin: \"\"}`}>\r\n            <div className=\"w-full py-[0.5px] flex items-center px-3\">\r\n                <RectShape color=\"#E5E7EB\" style={imageStyles} />\r\n                <div className=\"w-[calc(100%-70px)] mt-1 gap-2 h-5/6 flex flex-col justify-center\">\r\n                    <RectShape color=\"#E5E7EB\" style={firstTextStyles} />\r\n                    <RectShape color=\"#E5E7EB\" style={secondTextStyles} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default UserLoader","import React from 'react'\r\n\r\nconst ArrowToLeft: React.FC = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 19l-7-7 7-7\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default ArrowToLeft","import React from 'react'\r\n\r\nconst ArrowToRight: React.FC = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 5l7 7-7 7\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default ArrowToRight","import React, { useCallback } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport ProfileRoutes from 'constants/profile-routes'\r\nimport ArrowToLeft from 'svgs/empty/ArrowToLeft'\r\nimport ArrowToRight from 'svgs/empty/ArrowToRight'\r\nimport PostType from 'types/postType'\r\n\r\ntype PostsModalNavigationProps = {\r\n    currentIndex: number, \r\n    posts: PostType[],\r\n    routePart: () => string\r\n}\r\n\r\nconst PostsModalNavigation: React.FC<PostsModalNavigationProps> = React.memo(({ currentIndex, posts, routePart }) => {\r\n    const navigate = useNavigate();\r\n\r\n    const handleNavigateForward = useCallback(() => {\r\n        navigate(`../${ProfileRoutes.POST}${posts[currentIndex - 1].postId}`, { replace: true })\r\n    }, [currentIndex])\r\n\r\n    const handleNavigateBack = useCallback(() => {\r\n        navigate(`../${ProfileRoutes.POST}${posts[currentIndex + 1].postId}`, { replace: true })\r\n    }, [currentIndex])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                currentIndex !== 0 ?\r\n                    <button\r\n                        className=\"w-8 h-8 rounded-full bg-white absolute flex justify-center items-center left-[calc(100%+15px)] top-[46%]\"\r\n                        onClick={handleNavigateForward}\r\n                    >\r\n                        <ArrowToRight />\r\n                    </button> :\r\n                    null\r\n            }\r\n            {\r\n                currentIndex !== posts.length - 1 ?\r\n                    <button\r\n                        className=\"w-8 h-8 rounded-full bg-white absolute flex justify-center items-center right-[calc(100%+15px)] top-[46%]\"\r\n                        onClick={handleNavigateBack}\r\n                    >\r\n                        <ArrowToLeft />\r\n                    </button> :\r\n                    null\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\nexport default PostsModalNavigation","import { useOutletContext } from \"react-router-dom\";\r\nimport PostType from \"types/postType\";\r\n\r\nconst usePosts = () => useOutletContext<{posts: PostType[], changePosts: any}>()\r\n\r\nexport default usePosts;","import AreYouSureModal from 'components/modal/AreYouSureModal';\r\nimport Modal from 'components/modal/Modal';\r\nimport UserLoader from 'components/other/UserLoader';\r\nimport RoutesTypes from 'constants/routes-types';\r\nimport React, { useCallback, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport addToFollowing from \"redux-setup/features/signed-user/thunks/addToFollowing\";\r\nimport removeFromFollowing from \"redux-setup/features/signed-user/thunks/removeFromFollowing\";\r\nimport { useAppDispatch, useAppSelector } from 'redux-setup/hooks';\r\n\r\ntype UserHeaderProps = {\r\n    userInfo: {\r\n        username: string,\r\n        profileImage: string,\r\n        userId: string\r\n    }\r\n}\r\n\r\nconst UserHeader: React.FC<UserHeaderProps> = React.memo(({ userInfo }) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const navigate = useNavigate();\r\n    const { uid } = useParams();\r\n\r\n    const [isUnfollowModalOpen, setIsUnfollowModalOpen] = useState<boolean>(false);\r\n\r\n    const handleFollowingClick = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        setIsUnfollowModalOpen(true);\r\n    }, [])\r\n\r\n    const handleFollowClick = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        dispatch(addToFollowing({ userId: userInfo.userId, uid: uid as string }));\r\n    }, [userInfo.userId, uid])\r\n\r\n    const areYouSureEvent = useCallback(() => {\r\n        setIsUnfollowModalOpen(false)\r\n        dispatch(removeFromFollowing({ userId: userInfo.userId, uid: uid as string }))\r\n    }, [userInfo.userId, uid])\r\n\r\n    const navigateToProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + userInfo.userId)\r\n    }, [userInfo.userId])\r\n\r\n    const closeUnfollowModal = useCallback(() => {\r\n        setIsUnfollowModalOpen(false)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"w-full flex justify-start border-b items-center\">\r\n                {\r\n                    userInfo.userId.length ?\r\n                        <button\r\n                            className=\"h-14 py-[0.5px] gap-4 flex items-center px-3\"\r\n                            onClick={navigateToProfile}\r\n                        >\r\n                            <img\r\n                                src={\r\n                                    userInfo.profileImage.length ?\r\n                                        userInfo.profileImage :\r\n                                        process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"\r\n                                }\r\n                                className=\"h-9 w-9 rounded-full object-cover\"\r\n                            />\r\n                            <p className=\"font-medium text-[14px] tracking-wide whitespace-nowrap\">{userInfo.username}</p>\r\n                        </button> :\r\n                        <UserLoader\r\n                            imageStyles={{ width: 36, height: 36, borderRadius: \"50%\" }}\r\n                            firstTextStyles={{ width: 100, height: 7, borderRadius: \"10px\" }}\r\n                            secondTextStyles={{ width: 80, height: 7, borderRadius: \"10px\" }}\r\n                            margin=\"my-1\"\r\n                        />\r\n                }\r\n                {\r\n                    loggedUser.userId !== userInfo.userId && userInfo.userId.length ?\r\n                        <div className=\"flex gap-1\">\r\n                            <p>•</p>\r\n                            {\r\n                                loggedUser.following.some(data => data.userId === userInfo.userId) ?\r\n                                    <button\r\n                                        className=\"rounded text-gray-800 text-sm font-medium cursor-pointer\"\r\n                                        onClick={handleFollowingClick}\r\n                                    >\r\n                                        Following\r\n                                    </button> :\r\n                                    <button\r\n                                        className=\"font-medium text-cyan-500 rounded cursor-pointer text-sm tracking-wide\"\r\n                                        onClick={handleFollowClick}\r\n                                    >\r\n                                        Follow\r\n                                    </button>\r\n                            }\r\n                        </div> :\r\n                        null\r\n                }\r\n            </div>\r\n            {\r\n                isUnfollowModalOpen ?\r\n                    <Modal\r\n                        closeEvent={closeUnfollowModal}\r\n                        styles=\"h-72 top-[26.5%]\"\r\n                    >\r\n                        <AreYouSureModal\r\n                            areYouSureEvent={areYouSureEvent}\r\n                            profileImage={userInfo.profileImage}\r\n                            closeEvent={closeUnfollowModal}\r\n                            questionText={`Unfollow @${userInfo.username}`}\r\n                            buttonText=\"Unfollow\"\r\n                        />\r\n                    </Modal> :\r\n                    null\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\nexport default UserHeader","import { doc, getDoc } from \"firebase/firestore\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { db } from \"firebase-setup/firebaseConfig\";\r\nimport updatePosts from \"redux-setup/features/user-on-page/thunks/updatePosts\";\r\nimport { useAppDispatch, useAppSelector } from \"redux-setup/hooks\";\r\nimport PostType from \"types/postType\";\r\nimport UserState from \"types/userStateType\";\r\n\r\ntype UseCommentLikesProps = { \r\n    userId: string, \r\n    postId: string, \r\n    commentId: string,\r\n    changePostsAdd: any,\r\n    changePostsRemove: any,\r\n}\r\n\r\nconst useCommentLikes = ({ userId, postId, commentId, changePostsAdd, changePostsRemove }: UseCommentLikesProps) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { uid } = useParams();\r\n\r\n    const addLike = async () => {\r\n        const hotPosts = ((await getDoc(doc(db, \"users\", userId))).data() as UserState).posts\r\n\r\n        const newPosts = hotPosts.map(post => {\r\n            if(post.postId === postId){\r\n                return { ...post, comments: post.comments.map(comment => {\r\n                    if(comment.commentId === commentId){\r\n                        return { ...comment, likes: [...comment.likes, { userId: loggedUser.userId }] }\r\n                    }\r\n\r\n                    return comment\r\n                }) }\r\n            }\r\n\r\n            return post\r\n        }) as PostType[]\r\n        \r\n        if(changePostsAdd){\r\n            changePostsAdd()\r\n        }\r\n\r\n        await dispatch(updatePosts({ userId, newPosts, uid: uid as string }))\r\n    } \r\n\r\n    const removeLike = async () => {\r\n        const hotPosts = ((await getDoc(doc(db, \"users\", userId))).data() as UserState).posts\r\n\r\n        const newPosts = hotPosts.map(post => {\r\n            if(post.postId === postId){\r\n                return { ...post, comments: post.comments.map(comment => {\r\n                    if(comment.commentId === commentId){\r\n                        return { ...comment, likes: comment.likes.filter(like => like.userId !== loggedUser.userId) }\r\n                    }\r\n\r\n                    return comment\r\n                }) }\r\n            }\r\n\r\n            return post\r\n        }) as PostType[]\r\n\r\n        if(changePostsRemove){\r\n            changePostsRemove();\r\n        }\r\n        \r\n        await dispatch(updatePosts({ userId, newPosts, uid: uid as string }))\r\n    } \r\n\r\n    return { addLike, removeLike }\r\n}\r\n\r\nexport default useCommentLikes;","import RoutesTypes from 'constants/routes-types';\r\nimport React, { useCallback, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { useAppSelector } from 'redux-setup/hooks';\r\nimport Heart from 'svgs/empty/Heart';\r\nimport FilledHeart from 'svgs/filled/FilledHeart';\r\nimport CommentsType from 'types/commentsType';\r\nimport { motion } from \"framer-motion\";\r\nimport useCommentLikes from 'helpers/hooks/useCommentLikes';\r\nimport convertUnixTime from 'helpers/other/convert-unix-time/convertUnixTime';\r\nimport Modal from 'components/modal/Modal';\r\nimport UsersListModal from '../../users-list/UsersListModal';\r\nimport useUserInfo from 'helpers/hooks/useUserInfo';\r\n\r\ninterface ICommentsProps extends CommentsType {\r\n    fromId: string,\r\n    changePostsAdd: () => void,\r\n    changePostsRemove: () => void,\r\n}\r\n\r\nconst Comment: React.FC<ICommentsProps> = React.memo(({ \r\n    userId, \r\n    text, \r\n    likes, \r\n    commentId, \r\n    fromId, \r\n    createdAt, \r\n    changePostsAdd,\r\n    changePostsRemove, \r\n}) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user); \r\n\r\n    const navigate = useNavigate();\r\n    const { postId } = useParams();\r\n \r\n    const userInfo = useUserInfo(userId)\r\n    const { addLike, removeLike } = useCommentLikes({ userId: fromId, postId: postId as string, commentId, changePostsAdd, changePostsRemove })\r\n    \r\n    const [isListModalOpen, setIsListModalOpen] = useState<boolean>(false);\r\n\r\n    const generateTime = useCallback(() => {\r\n        let time = convertUnixTime(createdAt)\r\n        return time === \"Now\" ? time : time.split(\" \")[0] + time.split(\" \")[1][0]\r\n    }, [createdAt])\r\n\r\n    const handleLikes = () => {\r\n        likes.some(like => like.userId === loggedUser.userId) ? removeLike() : addLike()\r\n    }\r\n\r\n    const navigateToProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + userId)\r\n    }, [userId])\r\n\r\n    const openListModal = useCallback(() => {\r\n        setIsListModalOpen(true)\r\n    }, [])\r\n\r\n    const closeListModal = useCallback(() => {\r\n        setIsListModalOpen(false)\r\n    }, [])\r\n\r\n    return (\r\n        !userInfo.userId.length ?\r\n            <div className=\"h-12 w-full flex items-center justify-start gap-2\">\r\n                <div\r\n                    style={{ \"borderTopColor\": \"transparent\" }}\r\n                    className=\"w-[36px] h-[36px] border-[3px] border-gray-700 border-dashed rounded-full animate-spin\"\r\n                ></div>\r\n            </div> :\r\n            <>\r\n                <div className=\"flex w-full justify-between items-start\">\r\n                    <div className=\"flex w-[calc(100%-30px)] gap-4\">\r\n                        <button\r\n                            className=\"h-12 py-[0.5px] flex items-center\"\r\n                            onClick={navigateToProfile}\r\n                        >\r\n                            <img\r\n                                src={\r\n                                    userInfo.profileImage.length ?\r\n                                        userInfo.profileImage :\r\n                                        process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"\r\n                                }\r\n                                className=\"h-9 w-9 rounded-full object-cover\"\r\n                            />\r\n                        </button>\r\n                        <div className=\"flex flex-col w-[calc(100%-52px)]\">\r\n                            <div className=\"inline-block pt-3\">\r\n                                <p className=\"break-words text-[14px]\">\r\n                                    <span\r\n                                        className=\"font-medium text-sm tracking-wide whitespace-nowrap cursor-pointer\"\r\n                                        onClick={navigateToProfile}\r\n                                    >\r\n                                        {userInfo.username}\r\n                                    </span>\r\n                                    <span className=\"ml-2\">{text}</span>\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"flex gap-2 text-xs text-gray-400\">\r\n                                <p>\r\n                                    {generateTime()}\r\n                                </p>\r\n                                <button onClick={openListModal}>\r\n                                    <p className=\"font-medium\">{`${likes.length} like${likes.length === 1 ? \"\" : \"s\"}`}</p>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        <div className=\"flex items-center justify-center h-[42px] w-[20px]\">\r\n                            <motion.div\r\n                                onClick={handleLikes}\r\n                                className=\"h-[15px] w-[15px] cursor-pointer\"\r\n                                {...(\r\n                                    likes.every(like => like.userId !== loggedUser.userId) ?\r\n                                        {\r\n                                            whileTap: {\r\n                                                width: \"50px\",\r\n                                                height: \"50px\",\r\n                                                transition: { repeat: 1, repeatType: \"reverse\", duration: 0.5 },\r\n                                            }\r\n                                        } :\r\n                                        {}\r\n                                )}\r\n                            >\r\n                                {\r\n                                    likes.some(like => like.userId === loggedUser.userId) ?\r\n                                        <FilledHeart\r\n                                            styles=\"h-full w-full text-red-500\"\r\n                                        /> :\r\n                                        <Heart\r\n                                            styles=\"h-full w-full\"\r\n                                            includeHovering={true}\r\n                                        />\r\n                                }\r\n                            </motion.div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                {\r\n                    isListModalOpen ?\r\n                        <Modal\r\n                            closeEvent={closeListModal}\r\n                            styles=\"h-96 top-[20%]\"\r\n                        >\r\n                            <UsersListModal\r\n                                descriptionLine=\"Likes\"\r\n                                usersList={likes}\r\n                                closeEvent={closeListModal}\r\n                            />\r\n                        </Modal> :\r\n                        null\r\n                }\r\n            </>\r\n    )\r\n})\r\n\r\nexport default Comment","import UserLoader from 'components/other/UserLoader'\r\nimport RoutesTypes from 'constants/routes-types'\r\nimport React, { useCallback, useMemo } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport CommentType from 'types/commentsType'\r\nimport PostType from 'types/postType'\r\nimport Comment from './Comment'\r\n\r\ntype PostCommentProps = { \r\n    currentPost: PostType, \r\n    userInfo: {\r\n        username: string,\r\n        profileImage: string,\r\n        userId: string\r\n    },\r\n    changePostsAdd: (commentId: string) => void,\r\n    changePostsRemove: (commentId: string) => void,\r\n}\r\n\r\nconst PostComments: React.FC<PostCommentProps> = React.memo(({ currentPost, userInfo, changePostsAdd, changePostsRemove }) => {\r\n    const navigate = useNavigate();\r\n\r\n    const commentsToRender = useMemo(() => currentPost.comments.map((comment, index) => <Comment\r\n        changePostsAdd={() => changePostsAdd(comment.commentId)}\r\n        changePostsRemove={() => changePostsRemove(comment.commentId)}\r\n        {...comment}\r\n        fromId={userInfo.userId}\r\n        key={index}\r\n    />), [currentPost.comments, userInfo.userId])\r\n\r\n    const navigateToProfile = useCallback(() => {\r\n        navigate(RoutesTypes.DASHBOARD + userInfo.userId)\r\n    }, [userInfo.userId])\r\n\r\n    return (\r\n        <div className=\"w-full h-[calc(100%-180px)] sm:h-[calc(100%-180px)] px-3 flex flex-col items-start overflow-hidden overflow-y-auto no-bar\">\r\n            {\r\n                userInfo.userId.length ?\r\n                    <>\r\n                        <div className=\"flex w-full gap-4\">\r\n                            <button\r\n                                className=\"h-12 py-[0.5px] flex items-center\"\r\n                                onClick={navigateToProfile}\r\n                            >\r\n                                <img\r\n                                    src={\r\n                                        userInfo.profileImage.length ?\r\n                                            userInfo.profileImage :\r\n                                            process.env.PUBLIC_URL + \"/images/default-avatar-image.jpg\"\r\n                                    }\r\n                                    className=\"h-9 w-9 rounded-full object-cover\"\r\n                                />\r\n                            </button>\r\n                            <div className=\"inline-block w-[calc(100%-52px)] pt-3\">\r\n                                <p className=\"break-words text-[14px]\">\r\n                                    <span\r\n                                        className=\"font-medium text-sm tracking-wide whitespace-nowrap cursor-pointer\"\r\n                                        onClick={navigateToProfile}\r\n                                    >\r\n                                        {userInfo.username}\r\n                                    </span>\r\n                                    <span className=\"ml-2\">{currentPost.text}</span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        {commentsToRender}\r\n                    </> :\r\n                    <UserLoader\r\n                        imageStyles={{ width: 36, height: 36, borderRadius: \"50%\" }}\r\n                        firstTextStyles={{ width: 100, height: 7, borderRadius: \"10px\" }}\r\n                        secondTextStyles={{ width: 80, height: 7, borderRadius: \"10px\" }}\r\n                        margin=\"my-1 ml-[-12px]\"\r\n                    />\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default PostComments","import { useCallback } from \"react\";\r\nimport { useAppSelector } from \"redux-setup/hooks\"\r\nimport PostType from \"types/postType\"\r\n\r\nconst useUIChanges = (changePosts: any, postId: string) => {\r\n    const loggedUser = useAppSelector(state => state.signedUser.user);\r\n\r\n    const addLikeToPost = useCallback(() => {\r\n        if(changePosts){\r\n            changePosts((posts: PostType[]) => posts.map(post => {\r\n                if (post.postId === postId) {\r\n                    return { ...post, likes: [...post.likes, { userId: loggedUser.userId }] }\r\n                }\r\n\r\n                return post\r\n            }) as PostType[])\r\n        }\r\n    }, [changePosts, postId])\r\n\r\n    const removeLikeFromPost = useCallback(() => {\r\n        if(changePosts){\r\n            changePosts((posts: PostType[]) => posts.map(post => {\r\n                if (post.postId === postId) {\r\n                    return { ...post, likes: post.likes.filter(obj => obj.userId !== loggedUser.userId) }\r\n                }\r\n\r\n                return post\r\n            }) as PostType[])\r\n        }\r\n    }, [changePosts, postId])\r\n\r\n    const addLikeToComment = useCallback((commentId: string) => {\r\n        if(changePosts){\r\n            changePosts((posts: PostType[]) => posts.map(post => {\r\n                if(post.postId === postId){\r\n                    return { ...post, comments: post.comments.map(comment => {\r\n                        if(comment.commentId === commentId){\r\n                            return { ...comment, likes: [...comment.likes, { userId: loggedUser.userId }] }\r\n                        }\r\n    \r\n                        return comment\r\n                    }) }\r\n                }\r\n    \r\n                return post\r\n            }) as PostType[])\r\n        }\r\n    }, [changePosts, postId])\r\n\r\n    const removeLikeFromComment = useCallback((commentId: string) => {\r\n        if(changePosts){\r\n            changePosts((posts: PostType[]) => posts.map(post => {\r\n                if(post.postId === postId){\r\n                    return { ...post, comments: post.comments.map(comment => {\r\n                        if(comment.commentId === commentId){\r\n                            return { ...comment, likes: comment.likes.filter(like => like.userId !== loggedUser.userId) }\r\n                        }\r\n    \r\n                        return comment\r\n                    }) }\r\n                }\r\n    \r\n                return post\r\n            }) as PostType[])\r\n        }\r\n    }, [changePosts, postId])\r\n\r\n    return { addLikeToPost, removeLikeFromPost, addLikeToComment, removeLikeFromComment }\r\n}\r\n\r\nexport default useUIChanges","import React, { useCallback, useMemo, useRef, useState } from 'react'\r\nimport { useLocation, useParams } from 'react-router-dom'\r\nimport PostType from 'types/postType'\r\nimport PostsModalNavigation from 'pages/profile/components/post-modal-page/components/PostsModalNavigation'\r\nimport CommentForm from \"components/post/CommentForm\";\r\nimport LikesBar from 'components/post/LikesBar'\r\nimport usePosts from 'pages/profile/hooks/usePosts'\r\nimport ProfileRoutes from 'constants/profile-routes'\r\nimport UserHeader from './components/UserHeader'\r\nimport useWindowWidth from 'helpers/hooks/useWindowWidth'\r\nimport PostComments from './components/PostComments'\r\nimport Time from 'components/other/Time';\r\nimport useUIChanges from 'pages/profile/hooks/useUIChanges';\r\nimport useUserInfo from 'helpers/hooks/useUserInfo';\r\n\r\nconst PostModalPage: React.FC = React.memo(() => {\r\n    const { posts, changePosts } = usePosts();\r\n\r\n    const commentsRef = useRef<React.RefObject<HTMLInputElement>>(null);\r\n\r\n    const { postId } = useParams();\r\n    const location = useLocation();\r\n\r\n    const currentPost = useMemo(() => posts.find(post => post?.postId === postId) as PostType, [posts, postId])\r\n    const currentIndex = useMemo(() => posts.indexOf(currentPost as PostType), [posts, currentPost])\r\n\r\n    const [wordEntering, setWordEntering] = useState<string>(\"\");\r\n\r\n    const innerWidth = useWindowWidth();\r\n    const { \r\n        addLikeToPost, \r\n        removeLikeFromPost, \r\n        addLikeToComment,\r\n        removeLikeFromComment \r\n    } = useUIChanges(changePosts, postId as string)\r\n    const userInfo = useUserInfo(currentPost?.fromId as string)\r\n\r\n    const routePart = useCallback(() => {\r\n        const locationArray = location.pathname.split(\"/\");\r\n        return locationArray.slice(0, locationArray.indexOf(ProfileRoutes.POST) - 1).join(\"/\")\r\n    }, [location.pathname])\r\n\r\n    return (\r\n        !currentPost || !posts ?\r\n            <div className=\"w-full h-full flex items-center justify-center\">\r\n                <img\r\n                    src={process.env.PUBLIC_URL + \"/images/loading-logo.jpg\"}\r\n                    className=\"h-28\"\r\n                />\r\n            </div> :\r\n            <div className=\"w-full h-full flex flex-col sm:flex-row relative\">\r\n                <div className={`\r\n                    w-full sm:w-3/5 bg-black h-1/3 sm:h-full flex items-center justify-center overflow-hidden\r\n                    ${innerWidth > 640 ? \"rounded-l-xl\" : \"rounded-t-xl\"}\r\n                `}>\r\n                    <img\r\n                        src={currentPost.postImage}\r\n                        className=\"h-full w-full object-contain\"\r\n                    />\r\n                </div>\r\n                <div className=\"w-full h-2/3 sm:h-full sm:w-2/5 flex flex-col justify-between\">\r\n                    <UserHeader userInfo={userInfo} />\r\n                    <PostComments\r\n                        currentPost={currentPost}\r\n                        userInfo={userInfo}\r\n                        changePostsAdd={addLikeToComment}\r\n                        changePostsRemove={removeLikeFromComment}\r\n                    />\r\n                    <LikesBar\r\n                        currentPost={currentPost}\r\n                        commentsRef={commentsRef}\r\n                        changePostsAdd={addLikeToPost}\r\n                        changePostsRemove={removeLikeFromPost}\r\n                    />\r\n                    <Time createdAt={currentPost.createdAt}/>\r\n                    <CommentForm\r\n                        wordEntering={wordEntering}\r\n                        setWordEntering={setWordEntering}\r\n                        commentsRef={commentsRef}\r\n                        currentPost={currentPost}\r\n                        changePosts={changePosts}\r\n                    />\r\n                </div>\r\n                <PostsModalNavigation\r\n                    currentIndex={currentIndex}\r\n                    posts={posts}\r\n                    routePart={routePart}\r\n                />\r\n            </div>\r\n    )\r\n})\r\n\r\nexport default PostModalPage","import Modal from 'components/modal/Modal'\r\nimport PostModalPage from 'pages/profile/components/post-modal-page/PostModalPage'\r\nimport React, { useCallback } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst PostModalPageRoute: React.FC = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const navigateBack = useCallback(() => {\r\n        navigate(-1)\r\n    }, [])\r\n\r\n    return (\r\n        <Modal\r\n            closeEvent={navigateBack}\r\n            styles=\"w-[70%] sm:w-5/6 h-[70%] lg:h-[90%] top-[15%] lg:top-[5%]\"\r\n        >\r\n            <PostModalPage />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default PostModalPageRoute","import { useEffect, useState } from 'react'\r\n\r\nconst useWindowWidth = () => {\r\n    const [innerWidth, setInnerWidth] = useState(window.innerWidth)\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setInnerWidth(window.innerWidth)\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize)\r\n    }, [])\r\n\r\n    return innerWidth;\r\n}\r\n\r\nexport default useWindowWidth","import { collection, getDocs, query, where } from \"firebase/firestore\";\r\nimport { db } from \"firebase-setup/firebaseConfig\";\r\nimport UserState from \"types/userStateType\";\r\n\r\nconst getUsers = async (\r\n    wordEntering: string,\r\n    setUsersInfo: React.Dispatch<React.SetStateAction<UserState[]>>\r\n) => {\r\n    if (wordEntering.length === 0) {\r\n        setUsersInfo([]);\r\n        return;\r\n    }\r\n\r\n    const usersRef = collection(db, \"users\");\r\n    const q = query(usersRef, where(\"username\", \">=\", wordEntering), where(\"username\", \"<=\", wordEntering + \"~\"));\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    setUsersInfo(querySnapshot.docs.map(doc => doc.data()) as UserState[])\r\n}\r\n\r\nexport default getUsers;","import React from 'react'\r\n\r\nconst Close: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Close","import React, { useState } from 'react'\r\n\r\nconst Direct: React.FC<{ styles: string, includeHovering: boolean }> = ({ styles, includeHovering }) => {\r\n    const [isHovered, setIsHovered] = useState<boolean>(false);\r\n\r\n    return (\r\n        <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className={`${styles} ${includeHovering && isHovered && \"text-gray-500\"}`}\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth={2}\r\n            onMouseEnter={() => setIsHovered(true)}\r\n            onMouseLeave={() => setIsHovered(false)}\r\n        >\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Direct","import React, { useState } from 'react'\r\n\r\nconst Saved: React.FC<{ styles: string, includeHovering: boolean }> = ({ styles, includeHovering }) => {\r\n    const [isHovered, setIsHovered] = useState<boolean>(false);\r\n\r\n    return (\r\n        <svg \r\n            xmlns=\"http://www.w3.org/2000/svg\" \r\n            className={`${styles} ${includeHovering && isHovered && \"text-gray-500\"}`} \r\n            fill=\"none\" \r\n            viewBox=\"0 0 24 24\" \r\n            stroke=\"currentColor\" \r\n            strokeWidth={2}\r\n            onMouseEnter={() => setIsHovered(true)}\r\n            onMouseLeave={() => setIsHovered(false)}\r\n        >\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Saved","import React from 'react'\r\n\r\nconst Smile: React.FC<{ styles: string }> = ({ styles }) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Smile"],"names":["Modal","React","children","closeEvent","styles","useEffect","document","body","classList","add","remove","clickHandler","useCallback","event","stopPropagation","className","onClick","includes","initial","scale","animate","transition","duration","DropMenu","noAnimation","y","exit","UserLoader","imageStyles","firstTextStyles","secondTextStyles","margin","color","style","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","currentIndex","posts","navigate","routePart","useNavigate","handleNavigateForward","ProfileRoutes","postId","replace","handleNavigateBack","length","useOutletContext","userInfo","loggedUser","useAppSelector","state","signedUser","user","dispatch","useAppDispatch","uid","useParams","useState","isUnfollowModalOpen","setIsUnfollowModalOpen","handleFollowingClick","handleFollowClick","addToFollowing","userId","areYouSureEvent","removeFromFollowing","navigateToProfile","RoutesTypes","closeUnfollowModal","src","profileImage","process","username","width","height","borderRadius","following","some","data","AreYouSureModal","questionText","buttonText","commentId","changePostsAdd","changePostsRemove","addLike","getDoc","doc","db","hotPosts","newPosts","map","post","comments","comment","likes","updatePosts","removeLike","filter","like","text","fromId","createdAt","useUserInfo","useCommentLikes","isListModalOpen","setIsListModalOpen","generateTime","time","convertUnixTime","split","openListModal","closeListModal","motion","every","whileTap","repeat","repeatType","FilledHeart","Heart","includeHovering","UsersListModal","descriptionLine","usersList","currentPost","commentsToRender","useMemo","index","key","changePosts","addLikeToPost","removeLikeFromPost","obj","addLikeToComment","removeLikeFromComment","usePosts","commentsRef","useRef","location","useLocation","find","indexOf","wordEntering","setWordEntering","innerWidth","useWindowWidth","useUIChanges","locationArray","pathname","slice","join","postImage","LikesBar","Time","CommentForm","navigateBack","window","setInnerWidth","addEventListener","getUsers","setUsersInfo","usersRef","collection","q","query","where","getDocs","querySnapshot","docs","isHovered","setIsHovered","onMouseEnter","onMouseLeave"],"sourceRoot":""}